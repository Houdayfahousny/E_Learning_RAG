[
  {
    "title": "AngularJS Introduction",
    "content": "AngularJS is a JavaScript framework. It can be added to an HTML page with a <script> tag.\n\nAngularJS extends HTML attributes with Directives, and binds data to HTML with Expressions.\n\nAngularJS is a JavaScript framework written in JavaScript.\n\nAngularJS is distributed as a JavaScript file, and can be added to a web page with a script tag:\n\nAngularJS extends HTML with ng-directives.\n\nThe ng-app directive defines an AngularJS application.\n\nThe ng-model directive binds the value of HTML controls (input, select, textarea) to application data.\n\nThe ng-bind directive binds application data to the HTML view.\n\nExample explained:\n\nAngularJS starts automatically when the web page has loaded.\n\nThe ng-app directive tells AngularJS that the <div> element is the \"owner\" of an AngularJS application.\n\nThe ng-model directive binds the value of the input field to the application variable name.\n\nThe ng-bind directive binds the content of the <p> element to the application variable name.\n\nAs you have already seen, AngularJS directives are HTML attributes with an ng prefix.\n\nThe ng-init directive initializes AngularJS application variables.\n\nAlternatively with valid HTML:\n\nYou can use data-ng-, instead of ng-, if you want to make your page HTML valid.\n\nYou will learn a lot more about directives later in this tutorial.\n\nAngularJS expressions are written inside double braces: {{ expression }}.\n\nAngularJS will \"output\" data exactly where the expression is written:\n\nAngularJS expressions bind AngularJS data to HTML the same way as the ng-bind directive.\n\nYou will learn more about expressions later in this tutorial.\n\nAngularJS modules define AngularJS applications.\n\nAngularJS controllers control AngularJS applications.\n\nThe ng-app directive defines the application, the ng-controller directive defines the controller.\n\nAngularJS modules define applications:\n\nAngularJS controllers control applications:\n\nYou will learn more about modules and controllers later in this tutorial.",
    "code_examples": [
      "Example:\n\n<script\nsrc=\"https://ajax.googleapis.com/ajax/libs/angularjs/1.6.9/angular.min.js\"></script>",
      "AngularJS Example:\n\n<!DOCTYPE html>\n<html><script\nsrc=\"https://ajax.googleapis.com/ajax/libs/angularjs/1.6.9/angular.min.js\"></script>\n<body><div ng-app=\"\">\n     <p>Name: <input type=\"text\" ng-model=\"name\"></p>\n     <p ng-bind=\"name\"></p>\n</div>\n</body>\n</html>\n",
      "AngularJS Example:\n\n<div ng-app=\"\" ng-init=\"firstName='John'\">\n<p>The name is <span ng-bind=\"firstName\"></span></p>\n</div>\n",
      "AngularJS Example:\n\n<div data-ng-app=\"\" data-ng-init=\"firstName='John'\">\n<p>The name is <span data-ng-bind=\"firstName\"></span></p>\n</div>\n",
      "AngularJS Example:\n\n<!DOCTYPE html>\n<html><script\nsrc=\"https://ajax.googleapis.com/ajax/libs/angularjs/1.6.9/angular.min.js\"></script><body><div ng-app=\"\">\n     <p>My first expression: {{ 5 + 5 }}</p>\n</div>\n</body>\n</html>\n",
      "AngularJS Example:\n\n<!DOCTYPE html>\n<html>\n <script\nsrc=\"https://ajax.googleapis.com/ajax/libs/angularjs/1.6.9/angular.min.js\"></script>\n <body><div ng-app=\"\">  <p>Name: \n <input type=\"text\" ng-model=\"name\"></p>  <p>{{name}}</p></div>\n</body>\n</html>\n",
      "AngularJS Example:\n\n<div ng-app=\"myApp\" ng-controller=\"myCtrl\">\nFirst Name: <input type=\"text\" ng-model=\"firstName\"><br>\nLast Name: <input type=\"text\" ng-model=\"lastName\"><br><br>\nFull Name: {{firstName + \" \" + lastName}}\n</div><script>\n var app = angular.module('myApp', []);app.controller('myCtrl', \n function($scope) {  $scope.firstName= \"John\";  $scope.lastName= \"Doe\";});</script>\n",
      "AngularJS Module:\n\n var app = angular.module('myApp', []);\n",
      "AngularJS Controller:\n\n     app.controller('myCtrl', \n function($scope) {  $scope.firstName= \"John\";  \n $scope.lastName= \"Doe\";});\n"
    ],
    "summary": "AngularJS is a JavaScript framework. It can be added to an HTML page with a <script> tag.\n\nAngularJS extends HTML attributes with Directives, and binds data to HTML with Expressions.\n\nAngularJS is a JavaScript framework written in JavaScript.\n\nAngularJS is distributed as a JavaScript file, and can b..."
  },
  {
    "title": "AngularJS Expressions",
    "content": "AngularJS binds data to HTML using Expressions.\n\nAngularJS expressions can be written inside double braces: {{ expression }}.\n\nAngularJS expressions can also be written inside a directive: ng-bind=\"expression\".\n\nAngularJS will resolve the expression, and return the result exactly where the expression is written.\n\nAngularJS expressions are much like JavaScript expressions: They can contain literals, operators, and variables.\n\nExample {{ 5 + 5 }} or {{ firstName + \" \" + lastName }}\n\nIf you remove the ng-app directive, HTML will display the expression as it is, without solving it:\n\nYou can write expressions wherever you like, AngularJS will simply resolve the expression and return the result.\n\nExample: Let AngularJS change the value of CSS properties. Change the color of the input box below, by changing its value: Example <div ng-app=\"\" ng-init=\"myCol='lightblue'\"><input style=\"background-color:{{myCol}}\" ng-model=\"myCol\"> </div> Try it Yourself » AngularJS Numbers AngularJS numbers are like JavaScript numbers: Example <div ng-app=\"\" ng-init=\"quantity=1;cost=5\"> <p>Total in dollar: {{ quantity * cost }}</p> </div> Try it Yourself » Same example using ng-bind: Example <div ng-app=\"\" ng-init=\"quantity=1;cost=5\"> <p>Total in dollar: <span ng-bind=\"quantity * cost\"></span></p> </div> Try it Yourself » Using ng-init is not very common. You will learn a better way to initialize data in the chapter about controllers. AngularJS Strings AngularJS strings are like JavaScript strings: Example <div ng-app=\"\" ng-init=\"firstName='John';lastName='Doe'\"> <p>The name is {{ firstName + \" \" + lastName }}</p></div> Try it Yourself » Same example using ng-bind: Example <div ng-app=\"\" ng-init=\"firstName='John';lastName='Doe'\"> <p>The name is <span ng-bind=\"firstName + ' ' + lastName\"></span></p></div> Try it Yourself » AngularJS Objects AngularJS objects are like JavaScript objects: Example <div ng-app=\"\" ng-init=\"person={firstName:'John',lastName:'Doe'}\"> <p>The name is {{ person.lastName }}</p> </div> Try it Yourself » Same example using ng-bind: Example <div ng-app=\"\" ng-init=\"person={firstName:'John',lastName:'Doe'}\"> <p>The name is <span ng-bind=\"person.lastName\"></span></p> </div> Try it Yourself » AngularJS Arrays AngularJS arrays are like JavaScript arrays: Example <div ng-app=\"\" ng-init=\"points=[1,15,19,2,40]\"> <p>The third result is {{ points[2] }}</p> </div> Try it Yourself » Same example using ng-bind: Example <div ng-app=\"\" ng-init=\"points=[1,15,19,2,40]\"> <p>The third result is <span ng-bind=\"points[2]\"></span></p> </div> Try it Yourself » AngularJS Expressions vs. JavaScript Expressions Like JavaScript expressions, AngularJS expressions can contain literals, operators, and variables. Unlike JavaScript expressions, AngularJS expressions can be written inside HTML. AngularJS expressions do not support conditionals, loops, and exceptions, while JavaScript expressions do. AngularJS expressions support filters, while JavaScript expressions do not. Learn about JavaScript in our JavaScript Tutorial. ❮ Previous Next ❯ ★ +1 Track your progress - it's free! Log in Sign Up\n\nExample: Let AngularJS change the value of CSS properties.\n\nChange the color of the input box below, by changing its value:\n\nAngularJS numbers are like JavaScript numbers:\n\nSame example using ng-bind:\n\nUsing ng-init is not very common. You will learn a better way to initialize data in the chapter about controllers.\n\nAngularJS strings are like JavaScript strings:\n\nSame example using ng-bind:\n\nAngularJS objects are like JavaScript objects:\n\nSame example using ng-bind:\n\nAngularJS arrays are like JavaScript arrays:\n\nSame example using ng-bind:\n\nLike JavaScript expressions, AngularJS expressions can contain literals, operators, and variables.\n\nUnlike JavaScript expressions, AngularJS expressions can be written inside HTML.\n\nAngularJS expressions do not support conditionals, loops, and exceptions, while JavaScript expressions do.\n\nAngularJS expressions support filters, while JavaScript expressions do not.\n\nLearn about JavaScript in our JavaScript Tutorial.",
    "code_examples": [
      "{{ expression }}",
      "ng-bind=\"expression\"",
      "ng-app",
      "ng-bind",
      "ng-init",
      "ng-bind",
      "ng-bind",
      "ng-bind",
      "Example:\n\n<!DOCTYPE html>\n<html><script src=\"https://ajax.googleapis.com/ajax/libs/angularjs/1.6.9/angular.min.js\"></script>\n<body><div ng-app=\"\">\n     <p>My first expression: {{ 5 + 5 }}</p>\n</div>\n</body>\n</html>\n",
      "Example:\n\n<!DOCTYPE html>\n<html>\n<script src=\"https://ajax.googleapis.com/ajax/libs/angularjs/1.6.9/angular.min.js\"></script><body><div>\n     <p>My first expression: {{ 5 + 5 }}</p>\n</div>\n</body>\n</html>\n",
      "Example:\n\n    <div ng-app=\"\" ng-init=\"myCol='lightblue'\"><input \n    style=\"background-color:{{myCol}}\" ng-model=\"myCol\">\n</div>\n",
      "Example:\n\n<div ng-app=\"\" ng-init=\"quantity=1;cost=5\">\n<p>Total in dollar: {{ quantity * cost }}</p>\n</div>\n",
      "Example:\n\n<div ng-app=\"\" ng-init=\"quantity=1;cost=5\">\n<p>Total in dollar: <span ng-bind=\"quantity * cost\"></span></p>\n</div>\n",
      "Example:\n\n<div ng-app=\"\" ng-init=\"firstName='John';lastName='Doe'\">\n<p>The name is {{ firstName + \" \" + lastName }}</p></div>\n",
      "Example:\n\n<div ng-app=\"\" ng-init=\"firstName='John';lastName='Doe'\">\n<p>The name is <span ng-bind=\"firstName + ' ' + lastName\"></span></p></div>\n",
      "Example:\n\n<div ng-app=\"\" ng-init=\"person={firstName:'John',lastName:'Doe'}\">\n<p>The name is {{ person.lastName }}</p>\n</div>\n",
      "Example:\n\n<div ng-app=\"\" ng-init=\"person={firstName:'John',lastName:'Doe'}\">\n<p>The name is <span ng-bind=\"person.lastName\"></span></p>\n</div>\n",
      "Example:\n\n<div ng-app=\"\" ng-init=\"points=[1,15,19,2,40]\">\n<p>The third result is {{ points[2] }}</p>\n</div>\n",
      "Example:\n\n<div ng-app=\"\" ng-init=\"points=[1,15,19,2,40]\">\n<p>The third result is <span ng-bind=\"points[2]\"></span></p>\n</div>\n"
    ],
    "summary": "AngularJS binds data to HTML using Expressions.\n\nAngularJS expressions can be written inside double braces: {{ expression }}.\n\nAngularJS expressions can also be written inside a directive: ng-bind=\"expression\".\n\nAngularJS will resolve the expression, and return the result exactly where the expressio..."
  },
  {
    "title": "AngularJS Modules",
    "content": "An AngularJS module defines an application.\n\nThe module is a container for the different parts of an application.\n\nThe module is a container for the application controllers.\n\nControllers always belong to a module.\n\nA module is created by using the AngularJS function angular.module\n\nThe \"myApp\" parameter refers to an HTML element in which the application will run.\n\nNow you can add controllers, directives, filters, and more, to your AngularJS application.\n\nAdd a controller to your application, and refer to the controller with the ng-controller directive:\n\nYou will learn more about controllers later in this tutorial.\n\nAngularJS has a set of built-in directives which you can use to add functionality to your application.\n\nFor a full reference, visit our AngularJS directive reference.\n\nIn addition you can use the module to add your own directives to your applications:\n\nYou will learn more about directives later in this tutorial.\n\nIt is common in AngularJS applications to put the module and the controllers in JavaScript files.\n\nIn this example, \"myApp.js\" contains an application module definition, while \"myCtrl.js\" contains the controller:\n\nThe [] parameter in the module definition can be used to define dependent modules.\n\nWithout the [] parameter, you are not creating a new module, but retrieving an existing one.\n\nGlobal functions should be avoided in JavaScript. They can easily be overwritten or destroyed by other scripts.\n\nAngularJS modules reduces this problem, by keeping all functions local to the module.\n\nWhile it is common in HTML applications to place scripts at the end of the <body> element, it is recommended that you load the AngularJS library either in the <head> or at the start of the <body>.\n\nThis is because calls to angular.module can only be compiled after the library has been loaded.",
    "code_examples": [
      "angular.module",
      "ng-controller",
      "<body>",
      "<head>",
      "<body>",
      "angular.module",
      "Example:\n\n    <div ng-app=\"myApp\">...</div><script>\nvar app = angular.module(\"myApp\", []);\n    </script>",
      "Example:\n\n<div ng-app=\"myApp\" ng-controller=\"myCtrl\">\n    {{ firstName + \" \" + lastName }}</div><script>\n\n    var \n    app \n    = angular.module(\"myApp\", \n    []);app.controller(\"myCtrl\", function($scope) {  $scope.firstName \n    = \"John\";  $scope.lastName \n    = \"Doe\";});</script>\n",
      "Example:\n\n    <div ng-app=\"myApp\" w3-test-directive></div><script>\n    var app = \n    angular.module(\"myApp\", []);app.directive(\"w3TestDirective\", \n    function() {  return {    template : \"I was made in a directive constructor!\"  };\n    });</script>",
      "Example:\n\n    <!DOCTYPE html><html>\n<script src=\"https://ajax.googleapis.com/ajax/libs/angularjs/1.6.9/angular.min.js\"></script>\n    <body><div ng-app=\"myApp\" \n    ng-controller=\"myCtrl\">{{ firstName + \" \" + lastName }}</div>\n<script src=\"myApp.js\"></script>\n<script src=\"myCtrl.js\"></script></body></html>\n",
      "myApp.js:\n\nvar app = angular.module(\"myApp\", []);\n",
      "myCtrl.js:\n\napp.controller(\"myCtrl\", function($scope) {\n    $scope.firstName    = \"John\";\n  $scope.lastName= \"Doe\";\n});\n",
      "Example:\n\n<!DOCTYPE html><html><body><script src=\"https://ajax.googleapis.com/ajax/libs/angularjs/1.6.9/angular.min.js\"></script><div ng-app=\"myApp\" \nng-controller=\"myCtrl\">{{ firstName + \" \" + lastName }}</div>\n<script>var app = angular.module(\"myApp\", \n[]);app.controller(\"myCtrl\", function($scope) {  $scope.firstName \n= \"John\";  $scope.lastName \n= \"Doe\";});</script></body></html>\n"
    ],
    "summary": "An AngularJS module defines an application.\n\nThe module is a container for the different parts of an application.\n\nThe module is a container for the application controllers.\n\nControllers always belong to a module.\n\nA module is created by using the AngularJS function angular.module\n\nThe \"myApp\" param..."
  },
  {
    "title": "AngularJS Directives",
    "content": "AngularJS lets you extend HTML with new attributes called Directives.\n\nAngularJS has a set of built-in directives which offers functionality to your applications.\n\nAngularJS also lets you define your own directives.\n\nAngularJS directives are extended HTML attributes with the prefix ng-.\n\nThe ng-app directive initializes an AngularJS application.\n\nThe ng-init directive initializes application data.\n\nThe ng-model directive binds the value of HTML controls (input, select, textarea) to application data.\n\nRead about all AngularJS directives in our AngularJS directive reference.\n\nThe ng-app directive also tells AngularJS that the <div> element is the \"owner\" of the AngularJS application.\n\nThe {{ firstName }} expression, in the example above, is an AngularJS data binding expression.\n\nData binding in AngularJS binds AngularJS expressions with AngularJS data.\n\n{{ firstName }} is bound with ng-model=\"firstName\".\n\nIn the next example two text fields are bound together with two ng-model directives:\n\nUsing ng-init is not very common. You will learn how to initialize data in the chapter about controllers.\n\nThe ng-repeat directive repeats an HTML element:\n\nThe ng-repeat directive actually clones HTML elements once for each item in a collection.\n\nThe ng-repeat directive used on an array of objects:\n\nAngularJS is perfect for database CRUD (Create Read Update Delete) applications. Just imagine if these objects were records from a database.\n\nThe ng-app directive defines the root element of an AngularJS application.\n\nThe ng-app directive will auto-bootstrap (automatically initialize) the application when a web page is loaded.\n\nThe ng-init directive defines initial values for an AngularJS application.\n\nNormally, you will not use ng-init. You will use a controller or module instead.\n\nYou will learn more about controllers and modules later.\n\nThe ng-model directive binds the value of HTML controls (input, select, textarea) to application data.\n\nThe ng-model directive can also:\n\nRead more about the ng-model directive in the next chapter.\n\nIn addition to all the built-in AngularJS directives, you can create your own directives.\n\nNew directives are created by using the .directive function.\n\nTo invoke the new directive, make an HTML element with the same tag name as the new directive.\n\nWhen naming a directive, you must use a camel case name, w3TestDirective, but when invoking it, you must use - separated name, w3-test-directive:\n\nYou can invoke a directive by using:\n\nThe examples below will all produce the same result:\n\nElement name\n\nAttribute\n\nClass\n\nComment\n\nYou can restrict your directives to only be invoked by some of the methods.\n\nBy adding a restrict property with the value \"A\", the directive can only be invoked by attributes:\n\nThe legal restrict values are:\n\nBy default the value is EA, meaning that both Element names and attribute names can invoke the directive.",
    "code_examples": [
      "ng-",
      "ng-app",
      "ng-init",
      "ng-model",
      "ng-app",
      "{{ firstName }}",
      "{{ firstName }}",
      "ng-model=\"firstName\"",
      "ng-init",
      "ng-repeat",
      "ng-repeat",
      "ng-repeat",
      "ng-app",
      "ng-app",
      "ng-init",
      "ng-model",
      "ng-model",
      "ng-model",
      ".directive",
      "\nw3TestDirective",
      "-",
      "w3-test-directive",
      "restrict",
      "\"A\"",
      "E",
      "A",
      "C",
      "M",
      "EA",
      "Example:\n\n<div ng-app=\"\" ng-init=\"firstName='John'\">\n    <p>Name: <input type=\"text\" ng-model=\"firstName\"></p>\n    <p>You wrote: {{ firstName }}</p>\n</div>\n",
      "Example:\n\n<div ng-app=\"\" ng-init=\"quantity=1;price=5\">\nQuantity: <input type=\"number\"    ng-model=\"quantity\">\nCosts:    <input type=\"number\" ng-model=\"price\">\nTotal in dollar: {{ quantity * price }}</div>",
      "Example:\n\n<div ng-app=\"\" ng-init=\"names=['Jani','Hege','Kai']\">\n  <ul>\n    <li ng-repeat=\"x in names\">      {{ x }}\n    </li>\n  </ul>\n</div>\n",
      "Example:\n\n<div ng-app=\"\" ng-init=\"names=[\n    {name:'Jani',country:'Norway'},\n    {name:'Hege',country:'Sweden'},\n    {name:'Kai',country:'Denmark'}]\">\n<ul>\n      <li ng-repeat=\"x    in names\">\n        {{ x.name + ', ' + x.country }}  </li>\n    </ul>\n</div>\n",
      "Example:\n\n\n    <body ng-app=\"myApp\"><w3-test-directive></w3-test-directive>\n    <script>var app = angular.module(\"myApp\", []);app.directive(\"w3TestDirective\", \n    function() {  return {    \n    template : \"<h1>Made by a directive!</h1>\"  };\n    });</script>\n    </body>\n",
      "Example:\n\n<w3-test-directive></w3-test-directive>\n",
      "Example:\n\n<div w3-test-directive></div>\n",
      "Example:\n\n<div class=\"w3-test-directive\"></div>\n",
      "Example:\n\n<!-- directive: w3-test-directive -->\n",
      "Example:\n\n\n    var app = angular.module(\"myApp\", []);app.directive(\"w3TestDirective\", \n    function() {  return {    restrict : \"A\",\n        \n    template : \"<h1>Made by a directive!</h1>\"  };\n    });\n"
    ],
    "summary": "AngularJS lets you extend HTML with new attributes called Directives.\n\nAngularJS has a set of built-in directives which offers functionality to your applications.\n\nAngularJS also lets you define your own directives.\n\nAngularJS directives are extended HTML attributes with the prefix ng-.\n\nThe ng-app ..."
  },
  {
    "title": "AngularJS ng-model Directive",
    "content": "The ng-model directive binds the value of HTML controls (input, select, textarea) to application data.\n\nWith the ng-model directive you can bind the value of an input field to a variable created in AngularJS.\n\nThe binding goes both ways. If the user changes the value inside the input field, the AngularJS property will also change its value:\n\nThe ng-model directive can provide type validation for application data (number, e-mail, required):\n\nIn the example above, the span will be displayed only if the expression in the ng-show attribute returns true.\n\nIf the property in the ng-model attribute does not exist, AngularJS will create one for you.\n\nThe ng-model directive can provide status for application data (valid, dirty, touched, error):\n\nThe ng-model directive provides CSS classes for HTML elements, depending on their status:\n\nThe ng-model directive adds/removes the following classes, according to the status of the form field:",
    "code_examples": [
      "ng-model",
      "ng-model",
      "ng-show",
      "true",
      "ng-model",
      "ng-model",
      "ng-model",
      "ng-model",
      "Example:\n\n    <div ng-app=\"myApp\" ng-controller=\"myCtrl\">  Name: \n    <input ng-model=\"name\"></div><script>var app = angular.module('myApp', []);\n    app.controller('myCtrl', function($scope) {  $scope.name \n    = \"John Doe\";});</script>",
      "Example:\n\n    <div ng-app=\"myApp\" ng-controller=\"myCtrl\">  Name: \n    <input ng-model=\"name\">  <h1>You entered: {{name}}</h1>\n    </div>",
      "Example:\n\n    <form ng-app=\"\" name=\"myForm\">  Email:\n      \n    <input type=\"email\" name=\"myAddress\" ng-model=\"text\">  <span ng-show=\"myForm.myAddress.$error.email\">Not a valid e-mail \n    address</span></form>",
      "Example:\n\n    <form ng-app=\"\" name=\"myForm\" ng-init=\"myText = 'post@myweb.com'\">  Email:  <input type=\"email\" name=\"myAddress\" ng-model=\"myText\" \n    required>  <h1>Status</h1>  {{myForm.myAddress.$valid}}  {{myForm.myAddress.$dirty}}  {{myForm.myAddress.$touched}}</form>",
      "Example:\n\n\n    <style>input.ng-invalid {  background-color: \n        lightblue;\n    }</style><body><form ng-app=\"\" name=\"myForm\">  \n        Enter your name:  <input name=\"myName\" ng-model=\"myText\" required></form>\n"
    ],
    "summary": "The ng-model directive binds the value of HTML controls (input, select, textarea) to application data.\n\nWith the ng-model directive you can bind the value of an input field to a variable created in AngularJS.\n\nThe binding goes both ways. If the user changes the value inside the input field, the Angu..."
  },
  {
    "title": "AngularJS Data Binding",
    "content": "Data binding in AngularJS is the synchronization between the model and the view.\n\nAngularJS applications usually have a data model. The data model is a collection of data available for the application.\n\nThe HTML container where the AngularJS application is displayed, is called the view.\n\nThe view has access to the model, and there are several ways of displaying model data in the view.\n\nYou can use the ng-bind directive, which will bind the innerHTML of the element to the specified model property:\n\nYou can also use double braces {{ }} to display content from the model:\n\nOr you can use the ng-model directive on HTML controls to bind the model to the view.\n\nUse the ng-model directive to bind data from the model to the view on HTML controls (input, select, textarea)\n\nThe ng-model directive provides a two-way binding between the model and the view.\n\nData binding in AngularJS is the synchronization between the model and the view.\n\nWhen data in the model changes, the view reflects the change, and when data in the view changes, the model is updated as well. This happens immediately and automatically, which makes sure that the model and the view is updated at all times.\n\nApplications in AngularJS are controlled by controllers. Read about controllers in the AngularJS Controllers chapter.\n\nBecause of the immediate synchronization of the model and the view, the controller can be completely separated from the view, and simply concentrate on the model data. Thanks to the data binding in AngularJS, the view will reflect any changes made in the controller.",
    "code_examples": [
      "ng-bind",
      "{{ }}",
      "ng-model",
      "ng-model",
      "ng-model",
      "ng-model",
      "Example:\n\n    var app = angular.module('myApp', []);\n    app.controller('myCtrl', function($scope) {  $scope.firstname \n    = \"John\";  $scope.lastname = \"Doe\";});",
      "Example:\n\n    <p ng-bind=\"firstname\"></p>",
      "Example:\n\n    <p>First name: {{firstname}}</p>",
      "Example:\n\n    <input ng-model=\"firstname\">",
      "Example:\n\n\n    <div ng-app=\"myApp\" ng-controller=\"myCtrl\">  Name: <input ng-model=\"firstname\">  <h1>{{firstname}}</h1></div><script>\n\n\n    var app = angular.module('myApp', []);\n    app.controller('myCtrl', function($scope) {  $scope.firstname \n    = \"John\";  $scope.lastname = \"Doe\";});\n\n    \n    </script>\n\n",
      "Example:\n\n\n    <div ng-app=\"myApp\" ng-controller=\"myCtrl\">  <h1 ng-click=\"changeName()\">{{firstname}}</h1></div><script>\n\n\n    var app = angular.module('myApp', []);\n    app.controller('myCtrl', function($scope) {  $scope.firstname \n    = \"John\";  $scope.changeName \n    = function() {    $scope.firstname \n    = \"Nelly\";  }});\n\n\n    </script>\n\n"
    ],
    "summary": "Data binding in AngularJS is the synchronization between the model and the view.\n\nAngularJS applications usually have a data model. The data model is a collection of data available for the application.\n\nThe HTML container where the AngularJS application is displayed, is called the view.\n\nThe view ha..."
  },
  {
    "title": "AngularJS Controllers",
    "content": "AngularJS controllers control the data of AngularJS applications.\n\nAngularJS controllers are regular JavaScript Objects.\n\nAngularJS applications are controlled by controllers.\n\nThe ng-controller directive defines the application controller.\n\nA controller is a JavaScript Object, created by a standard JavaScript object constructor.\n\nApplication explained:\n\nThe AngularJS application is defined by ng-app=\"myApp\". The application runs inside the <div>.\n\nThe ng-controller=\"myCtrl\" attribute is an AngularJS directive. It defines a controller.\n\nThe myCtrl function is a JavaScript function.\n\nAngularJS will invoke the controller with a $scope object.\n\nIn AngularJS, $scope is the application object (the owner of application variables and functions).\n\nThe controller creates two properties (variables) in the scope (firstName and lastName).\n\nThe ng-model directives bind the input fields to the controller properties (firstName and lastName).\n\nThe example above demonstrated a controller object with two properties: lastName and firstName.\n\nA controller can also have methods (variables as functions):\n\nIn larger applications, it is common to store controllers in external files.\n\nJust copy the code between the <script> tags into an external file named personController.js:\n\nFor the next example we will create a new controller file:\n\nSave the file as namesController.js:\n\nAnd then use the controller file in an application:",
    "code_examples": [
      "AngularJS Example:\n\n    <div ng-app=\"myApp\" ng-controller=\"myCtrl\">\nFirst Name: <input type=\"text\" ng-model=\"firstName\"><br>\n    Last Name: <input type=\"text\" ng-model=\"lastName\"><br><br>\n    Full Name: {{firstName + \" \" + lastName}}\n</div><script>var app = angular.module('myApp', \n    []);app.controller('myCtrl', function($scope) {  $scope.firstName \n    = \"John\";  $scope.lastName = \"Doe\";});</script>\n",
      "AngularJS Example:\n\n<div ng-app=\"myApp\" ng-controller=\"personCtrl\">\nFirst Name: <input type=\"text\" ng-model=\"firstName\"><br>\nLast Name: <input type=\"text\" ng-model=\"lastName\"><br>\n<br>\nFull Name: {{fullName()}}\n</div>\n<script>var app = angular.module('myApp', []);app.controller('personCtrl', \n function($scope) {\n    $scope.firstName = \"John\";  $scope.lastName \n = \"Doe\";  $scope.fullName = function() {    \n return $scope.firstName + \" \" + $scope.lastName;  };});\n</script>\n",
      "AngularJS Example:\n\n    <div ng-app=\"myApp\" ng-controller=\"personCtrl\">\nFirst Name: <input type=\"text\" ng-model=\"firstName\"><br>\n    Last Name: <input type=\"text\" ng-model=\"lastName\"><br><br>\n    Full Name: {{fullName()}}\n</div><script src=\"personController.js\"></script>\n",
      "Example:\n\n angular.module('myApp', []).controller('namesCtrl',  \n function($scope) {\n  $scope.names = [\n    {name:'Jani',country:'Norway'},\n    {name:'Hege',country:'Sweden'},\n    {name:'Kai',country:'Denmark'}\n    ];\n});\n",
      "AngularJS Example:\n\n<div ng-app=\"myApp\" ng-controller=\"namesCtrl\">\n<ul>\n \n<li ng-repeat=\"x in names\">\n        {{ x.name + ', ' + x.country }}  </li>\n</ul>\n</div>\n<script src=\"namesController.js\"></script>\n"
    ],
    "summary": "AngularJS controllers control the data of AngularJS applications.\n\nAngularJS controllers are regular JavaScript Objects.\n\nAngularJS applications are controlled by controllers.\n\nThe ng-controller directive defines the application controller.\n\nA controller is a JavaScript Object, created by a standard..."
  },
  {
    "title": "AngularJS Scope",
    "content": "The scope is the binding part between the HTML (view) and the JavaScript (controller).\n\nThe scope is an object with the available properties and methods.\n\nThe scope is available for both the view and the controller.\n\nWhen you make a controller in AngularJS, you pass the $scope object as an argument:\n\nProperties made in the controller, can be referred to in the view:\n\nWhen adding properties to the $scope object in the controller, the view (HTML) gets access to these properties.\n\nIn the view, you do not use the prefix $scope, you just refer to a property name, like {{carname}}.\n\nIf we consider an AngularJS application to consist of:\n\nThen the scope is the Model.\n\nThe scope is a JavaScript object with properties and methods, which are available for both the view and the controller.\n\nIf you make changes in the view, the model and the controller will be updated:\n\nIt is important to know which scope you are dealing with, at any time.\n\nIn the two examples above there is only one scope, so knowing your scope is not an issue, but for larger applications there can be sections in the HTML DOM which can only access certain scopes.\n\nWhen dealing with the ng-repeat directive, each repetition has access to the current repetition object:\n\nEach <li> element has access to the current repetition object, in this case a string, which is referred to by using x.\n\nAll applications have a $rootScope which is the scope created on the HTML element that contains the ng-app directive.\n\nThe rootScope is available in the entire application.\n\nIf a variable has the same name in both the current scope and in the rootScope, the application uses the one in the current scope.\n\nA variable named \"color\" exists in both the controller's scope and in the rootScope:",
    "code_examples": [
      "$scope",
      "$scope",
      "$scope",
      "{{carname}}",
      "ng-repeat",
      "<li>",
      "x",
      "$rootScope",
      "ng-app",
      "Example:\n\n\n    <div ng-app=\"myApp\" ng-controller=\"myCtrl\"><h1>{{carname}}</h1></div><script>\n\n\n    var app = angular.module('myApp', \n    []);app.controller('myCtrl', function($scope) {  $scope.carname \n    = \"Volvo\";});\n\n</script>",
      "Example:\n\n\n    <div ng-app=\"myApp\" ng-controller=\"myCtrl\">\n<input ng-model=\"name\"><h1>My name is {{name}}</h1></div><script>\n\n\n    var app = angular.module('myApp', \n    []);app.controller('myCtrl', function($scope) {  $scope.name \n    = \"John Doe\";});\n\n</script>",
      "Example:\n\n\n    <div ng-app=\"myApp\" ng-controller=\"myCtrl\">\n<ul>  <li ng-repeat=\"x in names\">{{x}}</li></ul></div><script>\n\n\n    var app = angular.module('myApp', \n    []);app.controller('myCtrl', function($scope) {  $scope.names \n    = [\"Emil\", \"Tobias\", \"Linus\"];});\n\n</script>\n",
      "Example:\n\n\n    <body ng-app=\"myApp\"><p>The rootScope's favorite color:</p>\n    <h1>{{color}}</h1><div ng-controller=\"myCtrl\">  \n    <p>The scope of the controller's favorite color:</p>  <h1>{{color}}</h1></div><p>The rootScope's favorite color is \n    still:</p><h1>{{color}}</h1><script>\n\n\n    var app = angular.module('myApp', []);app.run(function($rootScope) {  $rootScope.color = 'blue';});app.controller('myCtrl', \n    function($scope) {  $scope.color = \"red\";});\n\n</script></body>"
    ],
    "summary": "The scope is the binding part between the HTML (view) and the JavaScript (controller).\n\nThe scope is an object with the available properties and methods.\n\nThe scope is available for both the view and the controller.\n\nWhen you make a controller in AngularJS, you pass the $scope object as an argument:..."
  },
  {
    "title": "AngularJS Filters",
    "content": "Filters can be added in AngularJS to format data.\n\nAngularJS provides filters to transform data:\n\nFilters can be added to expressions by using the pipe character |, followed by a filter.\n\nThe uppercase filter format strings to upper case:\n\nThe lowercase filter format strings to lower case:\n\nFilters are added to directives, like ng-repeat, by using the pipe character |, followed by a filter:\n\nThe orderBy filter sorts an array:\n\nThe currency filter formats a number as currency:\n\nRead more about the currency filter in our AngularJS currency Filter Reference\n\nThe filter filter selects a subset of an array.\n\nThe filter filter can only be used on arrays, and it returns an array containing only the matching items.\n\nReturn the names that contains the letter \"i\":\n\nRead more about the filter filter in our AngularJS filter Filter Reference\n\nBy setting the ng-model directive on an input field, we can use the value of the input field as an expression in a filter.\n\nType a letter in the input field, and the list will shrink/grow depending on the match:\n\nClick the table headers to change the sort order::\n\nBy adding the ng-click directive on the table headers, we can run a function that changes the sorting order of the array:\n\nYou can make your own filters by registering a new filter factory function with your module:\n\nMake a custom filter called \"myFormat\":\n\nThe myFormat filter will format every other character to uppercase.",
    "code_examples": [
      "currency",
      "date",
      "filter",
      "json",
      "limitTo",
      "lowercase",
      "number",
      "orderBy",
      "uppercase",
      "|",
      "uppercase",
      "lowercase",
      "ng-repeat",
      "|",
      "orderBy",
      "currency",
      "filter",
      "filter",
      "ng-model",
      "ng-click",
      "myFormat",
      "Example:\n\n<div ng-app=\"myApp\" ng-controller=\"personCtrl\">\n<p>The name is {{ lastName | uppercase }}</p>\n</div>\n",
      "Example:\n\n<div ng-app=\"myApp\" ng-controller=\"personCtrl\">\n<p>The name is {{ lastName | lowercase }}</p></div>\n",
      "Example:\n\n<div ng-app=\"myApp\" ng-controller=\"namesCtrl\">\n    <ul>\n      <li ng-repeat=\"x in names | orderBy:'country'\">\n        {{ x.name + ', ' + x.country }}  </li></ul>\n</div>\n",
      "Example:\n\n<div ng-app=\"myApp\" ng-controller=\"costCtrl\">\n<h1>Price: {{ price | currency }}</h1>\n</div>\n",
      "Example:\n\n<div ng-app=\"myApp\" ng-controller=\"namesCtrl\">\n    <ul>  <li ng-repeat=\"x in names | \nfilter : 'i'\">    {{ x }}  </li></ul>\n</div>\n",
      "Example:\n\n<div ng-app=\"myApp\" ng-controller=\"namesCtrl\">\n    <p><input type=\"text\" ng-model=\"test\"></p>\n    <ul>  <li ng-repeat=\"x in names | filter : test\">\n        {{ x }}  </li></ul>\n</div>\n",
      "Example:\n\n<div ng-app=\"myApp\" ng-controller=\"namesCtrl\">\n    <table border=\"1\" width=\"100%\">  <tr>    <th ng-click=\"orderByMe('name')\">Name</th>    \n    <th ng-click=\"orderByMe('country')\">Country</th>  </tr>  <tr \n    ng-repeat=\"x in names | orderBy:myOrderBy\">    <td>{{x.name}}</td>    \n    <td>{{x.country}}</td>  </tr></table></div>\n    <script>angular.module('myApp', []).controller('namesCtrl', \n    function($scope) {  $scope.names = [    {name:'Jani',country:'Norway'},    \n    {name:'Carl',country:'Sweden'},    {name:'Margareth',country:'England'},    \n    {name:'Hege',country:'Norway'},    {name:'Joe',country:'Denmark'},    \n    {name:'Gustav',country:'Sweden'},    {name:'Birgit',country:'Denmark'},    \n    {name:'Mary',country:'England'},    {name:'Kai',country:'Norway'}  \n    ];  $scope.orderByMe = function(x) {    $scope.myOrderBy \n    = x;  }});</script>",
      "Example:\n\n\n    <ul ng-app=\"myApp\" ng-controller=\"namesCtrl\">  <li ng-repeat=\"x \n    in names\">    {{x | \n    myFormat}}  </li></ul><script>\n\n\n    var app = \n    angular.module('myApp', []);app.filter('myFormat', \n    function() {  return function(x) {    var i, c, txt = \"\";\n        for (i = 0; i < \n    x.length; i++) {      \n    c = x[i];      \n    if (i % 2 == 0) {        c = c.toUpperCase();\n          }      txt \n    += c;    }    \n    return txt;  };});app.controller('namesCtrl', function($scope) \n    {  $scope.names = ['Jani', 'Carl', 'Margareth', 'Hege', \n    'Joe', 'Gustav', 'Birgit', 'Mary', 'Kai'];});\n\n</script>\n\n"
    ],
    "summary": "Filters can be added in AngularJS to format data.\n\nAngularJS provides filters to transform data:\n\nFilters can be added to expressions by using the pipe character |, followed by a filter.\n\nThe uppercase filter format strings to upper case:\n\nThe lowercase filter format strings to lower case:\n\nFilters ..."
  },
  {
    "title": "AngularJS Services",
    "content": "In AngularJS you can make your own service, or use one of the many built-in services.\n\nIn AngularJS, a service is a function, or object, that is available for, and limited to, your AngularJS application.\n\nAngularJS has about 30 built-in services. One of them is the $location service.\n\nThe $location service has methods which return information about the location of the current web page:\n\nUse the $location service in a controller:\n\nNote that the $location service is passed in to the controller as an argument. In order to use the service in the controller, it must be defined as a dependency.\n\nFor many services, like the $location service, it seems like you could use objects that are already in the DOM, like the window.location object, and you could, but it would have some limitations, at least for your AngularJS application.\n\nAngularJS constantly supervises your application, and for it to handle changes and events properly, AngularJS prefers that you use the $location service instead of the window.location object.\n\nThe $http service is one of the most common used services in AngularJS applications. The service makes a request to the server, and lets your application handle the response.\n\nUse the $http service to request data from the server:\n\nThis example demonstrates a very simple use of the $http service. Learn more about the $http service in the AngularJS Http Tutorial.\n\nThe $timeout service is AngularJS' version of the window.setTimeout function.\n\nDisplay a new message after two seconds:\n\nThe $interval service is AngularJS' version of the window.setInterval function.\n\nDisplay the time every second:\n\nTo create your own service, connect your service to the module:\n\nCreate a service named hexafy:\n\nTo use your custom made service, add it as a dependency when defining the controller:\n\nUse the custom made service named hexafy to convert a number into a hexadecimal number:\n\nOnce you have created a service, and connected it to your application, you can use the service in any controller, directive, filter, or even inside other services.\n\nTo use the service inside a filter, add it as a dependency when defining the filter:\n\nThe service hexafy used in the filter myFormat:\n\nYou can use the filter when displaying values from an object, or an array:",
    "code_examples": [
      "$location",
      "$location",
      "$location",
      "$location",
      "$location",
      "window.location",
      "$location",
      "window.location",
      "$http",
      "$http",
      "$http",
      "$http",
      "$timeout",
      "\nwindow.setTimeout",
      "$interval",
      "\nwindow.setInterval",
      "hexafy",
      "hexafy",
      "hexafy",
      "myFormat",
      "Example:\n\n    var app = angular.module('myApp', []);app.controller('customersCtrl', \n    function($scope, $location) {    $scope.myUrl = $location.absUrl();\n    });",
      "Example:\n\n    var app = angular.module('myApp', []);app.controller('myCtrl', \n    function($scope, $http) {  $http.get(\"welcome.htm\").then(function \n    (response) {    $scope.myWelcome \n    = response.data;  });});",
      "Example:\n\n    var app = angular.module('myApp', []);app.controller('myCtrl', \n    function($scope, $timeout) {  $scope.myHeader = \"Hello \n    World!\";  $timeout(function () {    \n    $scope.myHeader = \"How are you today?\";  }, 2000);\n    });",
      "Example:\n\n    var app = angular.module('myApp', []);app.controller('myCtrl', \n    function($scope, $interval) {  $scope.theTime = new \n    Date().toLocaleTimeString();  $interval(function () {    \n    $scope.theTime = new Date().toLocaleTimeString();  }, \n    1000);});",
      "Example:\n\n    app.service('hexafy', function() {  this.myFunc = function (x) {    \n    return x.toString(16);  }});",
      "Example:\n\n\n    app.controller('myCtrl', function($scope, hexafy) {  $scope.hex \n    = hexafy.myFunc(255);});\n",
      "Example:\n\n    app.filter('myFormat',['hexafy', function(hexafy) {\n      \n    return function(x) {    return \n    hexafy.myFunc(x);  };}]);",
      "Example:\n\n    <ul>  <li ng-repeat=\"x in counts\">{{x | myFormat}}</li></ul>"
    ],
    "summary": "In AngularJS you can make your own service, or use one of the many built-in services.\n\nIn AngularJS, a service is a function, or object, that is available for, and limited to, your AngularJS application.\n\nAngularJS has about 30 built-in services. One of them is the $location service.\n\nThe $location ..."
  },
  {
    "title": "AngularJS AJAX - $http",
    "content": "$http is an AngularJS service for reading data from remote servers.\n\nThe AngularJS $http service makes a request to the server, and returns a response.\n\nMake a simple request to the server, and display the result in a header:\n\nThe example above uses the .get method of the $http service.\n\nThe .get method is a shortcut method of the $http service. There are several shortcut methods:\n\nThe methods above are all shortcuts of calling the $http service:\n\nThe example above executes the $http service with an object as an argument. The object is specifying the HTTP method, the url, what to do on success, and what to do on failure.\n\nThe response from the server is an object with these properties:\n\nTo handle errors, add one more functions to the .then method:\n\nThe data you get from the response is expected to be in JSON format.\n\nJSON is a great way of transporting data, and it is easy to use within AngularJS, or any other JavaScript.\n\nExample: On the server we have a file that returns a JSON object containing 15 customers, all wrapped in array called records.\n\nClick here to take a look at the JSON object.\n\nThe ng-repeat directive is perfect for looping through an array:\n\nApplication explained:\n\nThe application defines the customersCtrl controller, with a $scope and $http object.\n\n$http is an XMLHttpRequest object for requesting external data.\n\n$http.get() reads JSON data from https://www.w3schools.com/angular/customers.php.\n\nOn success, the controller creates a property, myData, in the scope, with JSON data from the server.",
    "code_examples": [
      "{{data | json}}",
      "$http",
      ".get",
      "$http",
      ".delete()",
      ".get()",
      ".head()",
      ".jsonp()",
      ".patch()",
      ".post()",
      ".put()",
      ".config",
      ".data",
      ".headers",
      ".status",
      ".statusText",
      ".then",
      "records",
      "ng-repeat",
      "customersCtrl",
      "$scope",
      "$http",
      "$http",
      "$http.get()",
      "myData",
      "Example:\n\n\n    <div ng-app=\"myApp\" ng-controller=\"myCtrl\"> <p>Today's welcome \n    message is:</p><h1>{{myWelcome}}</h1></div><script>\n\n\n    var app = angular.module('myApp', []);app.controller('myCtrl', \n    function($scope, $http) {  $http.get(\"welcome.htm\")  .then(function(response) {\n        $scope.myWelcome \n    = response.data;  });});\n\n\n</script>\n\n",
      "Example:\n\n    var app = angular.module('myApp', []);app.controller('myCtrl', \n    function($scope, $http) {  $http({    \n    method : \"GET\",      url : \"welcome.htm\"  \n    }).then(function mySuccess(response) {    \n    $scope.myWelcome = response.data;  }, function myError(response) \n    {    $scope.myWelcome = \n    response.statusText;  });});",
      "Example:\n\n    var app = angular.module('myApp', []);app.controller('myCtrl', \n    function($scope, $http) {  $http.get(\"welcome.htm\")  .then(function(response) {    $scope.content \n    = response.data;    $scope.statuscode \n    = response.status;    $scope.statustext \n    = response.statusText;   });});",
      "Example:\n\n    var app = angular.module('myApp', []);app.controller('myCtrl', \n    function($scope, $http) {  $http.get(\"wrongfilename.htm\")  .then(function(response) {    \n    // First function handles success    $scope.content \n    = response.data;  }, function(response) {    \n    // Second function handles error    \n    $scope.content = \"Something went wrong\";  });});",
      "Example:\n\n\n<div ng-app=\"myApp\" ng-controller=\"customersCtrl\"> <ul>  <li \nng-repeat=\"x in myData\">    {{ x.Name + ', ' + x.Country }}  </li>\n</ul></div><script>\n\n\nvar app = angular.module('myApp', \n []);app.controller('customersCtrl', \n function($scope, $http) {  $http.get(\"customers.php\").then(function(response) {\n      $scope.myData \n= response.data.records;  });});\n\n\n</script>\n\n"
    ],
    "summary": "$http is an AngularJS service for reading data from remote servers.\n\nThe AngularJS $http service makes a request to the server, and returns a response.\n\nMake a simple request to the server, and display the result in a header:\n\nThe example above uses the .get method of the $http service.\n\nThe .get me..."
  },
  {
    "title": "AngularJS Tables",
    "content": "The ng-repeat directive is perfect for displaying tables.\n\nDisplaying tables with angular is very simple:\n\nTo make it nice, add some CSS to the page:\n\nTo sort the table, add an orderBy filter:\n\nTo display uppercase, add an uppercase filter:\n\nTo display the table index, add a <td> with $index:",
    "code_examples": [
      "AngularJS Example:\n\n<div ng-app=\"myApp\" ng-controller=\"customersCtrl\"> <table>\n  <tr ng-repeat=\"x in names\">    <td>{{ x.Name }}</td>    \n<td>{{ x.Country }}</td>  </tr></table></div>\n <script>var app = angular.module('myApp', []);app.controller('customersCtrl', \n function($scope, $http) {  $http.get(\"customers.php\")\n   .then(function (response) {$scope.names = response.data.records;});});</script>",
      "CSS Style:\n\n<style>table, th , td {  border: 1px solid grey;  \nborder-collapse: collapse;  padding: 5px;}table tr:nth-child(odd) {  \nbackground-color: #f1f1f1;}table tr:nth-child(even) {  \nbackground-color: #ffffff;}</style>\n",
      "AngularJS Example:\n\n<table>  <tr ng-repeat=\"x in names | orderBy : 'Country'\">    \n<td>{{ x.Name }}</td>    <td>{{ x.Country }}</td>  \n</tr></table>\n",
      "AngularJS Example:\n\n<table>  <tr ng-repeat=\"x in names\">    \n<td>{{ x.Name }}</td>    <td>{{ x.Country \n| uppercase }}</td>  \n</tr></table>\n",
      "AngularJS Example:\n\n<table>  <tr ng-repeat=\"x in names\">    \n <td>{{ $index + 1 }}</td>    <td>{{ x.Name }}</td>    <td>{{ x.Country }}</td>  \n</tr></table>\n",
      "AngularJS Example:\n\n <table>  <tr ng-repeat=\"x in names\">    <td ng-if=\"$odd\" \n style=\"background-color:#f1f1f1\">{{ x.Name }}</td>    <td ng-if=\"$even\">{{ \n x.Name }}</td>    <td ng-if=\"$odd\" style=\"background-color:#f1f1f1\">{{ \n x.Country }}</td>    <td ng-if=\"$even\">{{ x.Country }}</td>  </tr>\n </table>\n"
    ],
    "summary": "The ng-repeat directive is perfect for displaying tables.\n\nDisplaying tables with angular is very simple:\n\nTo make it nice, add some CSS to the page:\n\nTo sort the table, add an orderBy filter:\n\nTo display uppercase, add an uppercase filter:\n\nTo display the table index, add a <td> with $index:"
  },
  {
    "title": "AngularJS Select Boxes",
    "content": "AngularJS lets you create dropdown lists based on items in an array, or an object.\n\nIf you want to create a dropdown list, based on an object or an array in AngularJS, you should use the ng-options directive:\n\nYou can also use the ng-repeat directive to make the same dropdown list:\n\nBecause the ng-repeat directive repeats a block of HTML code for each item in an array, it can be used to create options in a dropdown list, but the ng-options directive was made especially for filling a dropdown list with options.\n\nYou can use both the ng-repeat directive and the ng-options directive:\n\nAssume you have an array of objects:\n\nUsing ng-repeat:\n\nWhen using the value as an object, use ng-value insead of value:\n\nUsing ng-repeat as an object:\n\nUsing ng-options:\n\nWhen the selected value is an object, it can hold more information, and your application can be more flexible.\n\nWe will use the ng-options directive in this tutorial.\n\nIn the previous examples the data source was an array, but we can also use an object.\n\nAssume you have an object with key-value pairs:\n\nThe expression in the ng-options attribute is a bit different for objects:\n\nUsing an object as the data source, x represents the key, and y represents the value:\n\nThe selected value will always be the value in a key-value pair.\n\nThe value in a key-value pair can also be an object:\n\nThe selected value will still be the value in a key-value pair, only this time it is an object:\n\nThe options in the dropdown list does not have to be the key in a key-value pair, it can also be the value, or a property of the value object:",
    "code_examples": [
      "ng-options",
      "ng-repeat",
      "ng-repeat",
      "ng-options",
      "ng-repeat",
      "ng-options",
      "ng-repeat",
      "ng-value",
      "value",
      "ng-repeat",
      "ng-options",
      "ng-options",
      "ng-options",
      "x",
      "y",
      "Example:\n\n\n    <div ng-app=\"myApp\" ng-controller=\"myCtrl\"><select ng-model=\"selectedName\" \n    ng-options=\"x for x in names\"></select></div>\n    <script>\n\n\n    var app = angular.module('myApp', []);app.controller('myCtrl', \n    function($scope) {  $scope.names = [\"Emil\", \"Tobias\", \n    \"Linus\"];});\n\n\n    </script>\n\n",
      "Example:\n\n\n    <select>  <option ng-repeat=\"x in names\">{{x}}</option></select>\n",
      "Example:\n\n    $scope.cars = [  {model : \"Ford Mustang\", color : \n    \"red\"},  {model : \"Fiat 500\", color : \"white\"},  \n    {model : \"Volvo XC90\", color : \"black\"}];",
      "Example:\n\n\n    <select ng-model=\"selectedCar\">  <option ng-repeat=\"x in cars\" value=\"{{x.model}}\">{{x.model}}</option>\n    </select><h1>You selected: {{selectedCar}}</h1>\n",
      "Example:\n\n\n    <select ng-model=\"selectedCar\">  <option ng-repeat=\"x in cars\" ng-value=\"{{x}}\">{{x.model}}</option>\n    </select><h1>You selected a {{selectedCar.color}} {{selectedCar.model}}</h1>\n",
      "Example:\n\n\n    <select ng-model=\"selectedCar\" ng-options=\"x.model for x in cars\">\n    </select><h1>You selected: {{selectedCar.model}}</h1>\n    <p>Its color is: {{selectedCar.color}}</p>\n",
      "Example:\n\n    $scope.cars = {  car01 : \"Ford\",  car02 : \"Fiat\",  car03 : \"Volvo\"};",
      "Example:\n\n\n    <select ng-model=\"selectedCar\" ng-options=\"x for (x, y) in cars\">\n    </select><h1>You selected: {{selectedCar}}</h1>\n\n",
      "Example:\n\n\n    $scope.cars = {  car01 : {brand : \"Ford\", model : \"Mustang\", color : \n    \"red\"},  car02 : {brand : \"Fiat\", model : \"500\", color : \"white\"},\n     \n    car03 : {brand : \"Volvo\", model : \"XC90\", color : \"black\"}};\n\n",
      "Example:\n\n\n    <select ng-model=\"selectedCar\" ng-options=\"y.brand for (x, y) in cars\">\n    </select>\n\n"
    ],
    "summary": "AngularJS lets you create dropdown lists based on items in an array, or an object.\n\nIf you want to create a dropdown list, based on an object or an array in AngularJS, you should use the ng-options directive:\n\nYou can also use the ng-repeat directive to make the same dropdown list:\n\nBecause the ng-r..."
  },
  {
    "title": "AngularJS SQL",
    "content": "AngularJS is perfect for displaying data from a Database. Just make sure the data is in JSON format.\n\nThe following section is a listing of the server code used to fetch SQL data.\n\nA request for data from a different server (other than the requesting page), are called cross-site HTTP requests.\n\nCross-site requests are common on the web. Many pages load CSS, images, and scripts from different servers.\n\nIn modern browsers, cross-site HTTP requests from scripts are restricted to same site for security reasons.\n\nThe following line, in our PHP examples, has been added to allow cross-site access.",
    "code_examples": [
      "AngularJS Example:\n\n<div ng-app=\"myApp\" ng-controller=\"customersCtrl\">\n\n<table>\n  <tr ng-repeat=\"x in names\">\n    <td>{{ x.Name }}</td>\n    <td>{{ x.Country }}</td>\n  </tr>\n</table>\n\n</div>\n\n<script>\nvar app = angular.module('myApp', []);\napp.controller('customersCtrl', function($scope, $http) {\n    $http.get(\"customers_mysql.php\")\n    .then(function (response) {$scope.names = response.data.records;});\n});\n</script>\n",
      "AngularJS Example:\n\n<div ng-app=\"myApp\" ng-controller=\"customersCtrl\">\n\n<table>\n  <tr ng-repeat=\"x in names\">\n    <td>{{ x.Name }}</td>\n    <td>{{ x.Country }}</td>\n  </tr>\n</table>\n\n</div>\n\n<script>\nvar app = angular.module('myApp', []);\napp.controller('customersCtrl', function($scope, $http) {\n    $http.get(\"customers_sql.aspx\")\n    .then(function (response) {$scope.names = response.data.records;});\n});\n</script>\n",
      "Example:\n\n    header(\"Access-Control-Allow-Origin: *\");",
      "Example:\n\n<?php\nheader(\"Access-Control-Allow-Origin: *\");\nheader(\"Content-Type: application/json; charset=UTF-8\");\n\n$conn = new mysqli(\"myServer\", \"myUser\", \"myPassword\", \"Northwind\");\n\n$result = $conn->query(\"SELECT CompanyName, City, Country FROM Customers\");\n\n$outp = \"\";\nwhile($rs = $result->fetch_array(MYSQLI_ASSOC)) {\n    if ($outp != \"\") {$outp .= \",\";}\n    $outp .= '{\"Name\":\"'  . $rs[\"CompanyName\"] . '\",';\n    $outp .= '\"City\":\"'   . $rs[\"City\"]        . '\",';\n    $outp .= '\"Country\":\"'. $rs[\"Country\"]     . '\"}';\n}\n$outp ='{\"records\":['.$outp.']}';\n$conn->close();\n\necho($outp);\n?>\n",
      "Example:\n\n<?php\nheader(\"Access-Control-Allow-Origin: *\");\nheader(\"Content-Type: application/json; charset=ISO-8859-1\");\n\n$conn = new COM(\"ADODB.Connection\");\n$conn->open(\"PROVIDER=Microsoft.Jet.OLEDB.4.0;Data Source=Northwind.mdb\");\n\n$rs = $conn->execute(\"SELECT CompanyName, City, Country FROM Customers\");\n\n$outp = \"\";\nwhile (!$rs->EOF) {\n    if ($outp != \"\") {$outp .= \",\";}\n    $outp .= '{\"Name\":\"'  . $rs[\"CompanyName\"] . '\",';\n    $outp .= '\"City\":\"'   . $rs[\"City\"]        . '\",';\n    $outp .= '\"Country\":\"'. $rs[\"Country\"]     . '\"}';\n    $rs->MoveNext();\n}\n$outp ='{\"records\":['.$outp.']}';\n\n$conn->close();\n\necho ($outp);\n?>\n",
      "Example:\n\n<%@ Import Namespace=\"System.IO\"%>\n<%@ Import Namespace=\"System.Data\"%>\n<%@ Import Namespace=\"System.Data.OleDb\"%>\n<%\nResponse.AppendHeader(\"Access-Control-Allow-Origin\", \"*\")\nResponse.AppendHeader(\"Content-type\", \"application/json\")\nDim conn As OleDbConnection\nDim objAdapter As OleDbDataAdapter\nDim objTable As DataTable\nDim objRow As DataRow\nDim objDataSet As New DataSet()\nDim outp\nDim c\nconn = New OledbConnection(\"Provider=Microsoft.Jet.OLEDB.4.0;data source=Northwind.mdb\")\nobjAdapter = New OledbDataAdapter(\"SELECT CompanyName, City, Country FROM Customers\", conn)\nobjAdapter.Fill(objDataSet, \"myTable\")\nobjTable=objDataSet.Tables(\"myTable\")\n\noutp = \"\"\nc = chr(34)\nfor each x in objTable.Rows\nif outp <> \"\" then outp = outp & \",\"\noutp = outp & \"{\" & c & \"Name\"    & c & \":\" & c & x(\"CompanyName\") & c & \",\"\noutp = outp &       c & \"City\"    & c & \":\" & c \n& x(\"City\")        & c & \",\"\noutp = outp &       c & \"Country\" & c & \":\" & c & x(\"Country\")     & c & \"}\"\nnext\n\noutp =\"{\" & c & \"records\" & c & \":[\" & outp & \"]}\"\nresponse.write(outp)\nconn.close\n%>\n",
      "Example:\n\n@{\nResponse.AppendHeader(\"Access-Control-Allow-Origin\", \"*\")\nResponse.AppendHeader(\"Content-type\", \"application/json\")\nvar db = Database.Open(\"Northwind\");\nvar query = db.Query(\"SELECT CompanyName, City, Country FROM Customers\");\nvar outp =\"\"\nvar c = chr(34)\n}\n@foreach(var row in query){\nif (outp != \"\") {outp = outp + \",\"}\noutp = outp + \"{\" + c + \"Name\"    + c + \":\" + c + @row.CompanyName + c + \",\"\noutp = outp +       c + \"City\"    + c + \":\" + c + @row.City        + c + \",\"\noutp = outp +       c + \"Country\" + c + \":\" + c + @row.Country     + c + \"}\"\n}\noutp =\"{\" + c  + \"records\" + c + \":[\" + outp + \"]}\"\n@outp\n"
    ],
    "summary": "AngularJS is perfect for displaying data from a Database. Just make sure the data is in JSON format.\n\nThe following section is a listing of the server code used to fetch SQL data.\n\nA request for data from a different server (other than the requesting page), are called cross-site HTTP requests.\n\nCros..."
  },
  {
    "title": "AngularJS HTML DOM",
    "content": "AngularJS has directives for binding application data to the attributes of HTML DOM elements.\n\nThe ng-disabled directive binds AngularJS application data to the disabled attribute of HTML elements.\n\nApplication explained:\n\nThe ng-disabled directive binds the application data mySwitch to the HTML button's disabled attribute.\n\nThe ng-model directive binds the value of the HTML checkbox element to the value of mySwitch.\n\nIf the value of mySwitch evaluates to true, the button will be disabled:\n\nIf the value of mySwitch evaluates to false, the button will not be disabled:\n\nThe ng-show directive shows or hides an HTML element.\n\nThe ng-show directive shows (or hides) an HTML element based on the value of ng-show.\n\nYou can use any expression that evaluates to true or false:\n\nIn the next chapter, there are more examples, using the click of a button to hide HTML elements.\n\nThe ng-hide directive hides or shows an HTML element.",
    "code_examples": [
      "AngularJS Example:\n\n<div ng-app=\"\" ng-init=\"mySwitch=true\">\n<p><button ng-disabled=\"mySwitch\">Click Me!</button>\n</p><p>\n<input type=\"checkbox\" ng-model=\"mySwitch\">Button</p>\n<p>{{ mySwitch }}</p>\n</div>\n",
      "Example:\n\n<p><button disabled>Click Me!</button>\n</p>\n",
      "Example:\n\n<p><button>Click Me!</button>\n</p>\n",
      "AngularJS Example:\n\n<div ng-app=\"\"><p ng-show=\"true\">I am visible.</p>\n<p ng-show=\"false\">I am not visible.</p>\n</div>\n",
      "AngularJS Example:\n\n<div ng-app=\"\" ng-init=\"hour=13\"><p ng-show=\"hour > 12\">I am visible.</p>\n</div>\n",
      "AngularJS Example:\n\n<div ng-app=\"\"><p ng-hide=\"true\">I am \n    not visible.</p>\n<p ng-hide=\"false\">I am visible.</p>\n</div>\n"
    ],
    "summary": "AngularJS has directives for binding application data to the attributes of HTML DOM elements.\n\nThe ng-disabled directive binds AngularJS application data to the disabled attribute of HTML elements.\n\nApplication explained:\n\nThe ng-disabled directive binds the application data mySwitch to the HTML but..."
  },
  {
    "title": "AngularJS Events",
    "content": "AngularJS has its own HTML events directives.\n\nYou can add AngularJS event listeners to your HTML elements by using one or more of these directives:\n\nThe event directives allows us to run AngularJS functions at certain user events.\n\nAn AngularJS event will not overwrite an HTML event, both events will be executed.\n\nMouse events occur when the cursor moves over an element, in this order:\n\nOr when a mouse button is clicked on an element, in this order:\n\nYou can add mouse events on any HTML element.\n\nIncrease the count variable when the mouse moves over the H1 element:\n\nThe ng-click directive defines AngularJS code that will be executed when the element is being clicked.\n\nYou can also refer to a function:\n\nIf you want to show a section of HTML code when a button is clicked, and hide when the button is clicked again, like a dropdown menu, make the button behave like a toggle switch:\n\nClick Me Menu: Pizza Pasta Pesce\n\nThe showMe variable starts out as the Boolean value false.\n\nThe myFunc function sets the showMe variable to the opposite of what it is, by using the ! (not) operator.\n\nYou can pass the $event object as an argument when calling the function.\n\nThe $event object contains the browser's event object:",
    "code_examples": [
      "ng-blur",
      "ng-change",
      "ng-click",
      "ng-copy",
      "ng-cut",
      "ng-dblclick",
      "ng-focus",
      "ng-keydown",
      "ng-keypress",
      "ng-keyup",
      "ng-mousedown",
      "ng-mouseenter",
      "ng-mouseleave",
      "ng-mousemove",
      "ng-mouseover",
      "ng-mouseup",
      "ng-paste",
      "ng-click",
      "showMe",
      "false",
      "myFunc",
      "showMe",
      "!",
      "$event",
      "$event",
      "Example:\n\n<div ng-app=\"myApp\" ng-controller=\"myCtrl\"><h1 ng-mousemove=\"count \n= count + 1\">Mouse over me!</h1>\n<h2>{{ count }}</h2></div><script>var app = \n angular.module('myApp', []);app.controller('myCtrl', function($scope) {  $scope.count = 0;});</script> ",
      "Example:\n\n<div ng-app=\"myApp\" ng-controller=\"myCtrl\"><button ng-click=\"count \n= count + 1\">Click me!</button>\n<p>{{ count }}</p></div><script>var app = \n angular.module('myApp', []);app.controller('myCtrl', function($scope) {  \n $scope.count = 0;});</script> ",
      "Example:\n\n<div ng-app=\"myApp\" ng-controller=\"myCtrl\"><button ng-click=\"myFunction()\">Click me!</button>\n<p>{{ count }}</p></div><script>var app = \n angular.module('myApp', []);app.controller('myCtrl', function($scope) {\n    \n $scope.count = 0;  $scope.myFunction = function() {    \n    $scope.count++;  }});</script> ",
      "Example:\n\n    <div ng-app=\"myApp\" ng-controller=\"myCtrl\"><button ng-click=\"myFunc()\">Click \n    Me!</button><div ng-show=\"showMe\">  <h1>Menu:</h1>\n     \n    <div>Pizza</div>  <div>Pasta</div>  <div>Pesce</div></div>\n    </div><script>var app = angular.module('myApp', []);\n    app.controller('myCtrl', function($scope) {  $scope.showMe = false;  $scope.myFunc \n    = function() {    $scope.showMe = !$scope.showMe;  }});\n    </script> ",
      "Example:\n\n    <div ng-app=\"myApp\" ng-controller=\"myCtrl\"><h1 ng-mousemove=\"myFunc($event)\">Mouse \n    Over Me!</h1><p>Coordinates: {{x + ', ' + y}}</p></div>\n    <script>var app = angular.module('myApp', []);app.controller('myCtrl', \n    function($scope) {  $scope.myFunc = function(myE) {    \n    $scope.x = myE.clientX;    $scope.y \n    = myE.clientY;  }});</script>\n"
    ],
    "summary": "AngularJS has its own HTML events directives.\n\nYou can add AngularJS event listeners to your HTML elements by using one or more of these directives:\n\nThe event directives allows us to run AngularJS functions at certain user events.\n\nAn AngularJS event will not overwrite an HTML event, both events wi..."
  },
  {
    "title": "AngularJS Forms",
    "content": "Forms in AngularJS provides data-binding and validation of input controls.\n\nInput controls are the HTML input elements:\n\nInput controls provides data-binding by using the ng-model directive.\n\nThe application does now have a property named firstname.\n\nThe ng-model directive binds the input controller to the rest of your application.\n\nThe property firstname, can be referred to in a controller:\n\nIt can also be referred to elsewhere in the application:\n\nA checkbox has the value true or false. Apply the ng-model directive to a checkbox, and use its value in your application.\n\nShow the header if the checkbox is checked:\n\nBind radio buttons to your application with the ng-model directive.\n\nRadio buttons with the same ng-model can have different values, but only the selected one will be used.\n\nDisplay some text, based on the value of the selected radio button:\n\nThe value of myVar will be either dogs, tuts, or cars.\n\nBind select boxes to your application with the ng-model directive.\n\nThe property defined in the ng-model attribute will have the value of the selected option in the selectbox.\n\nDisplay some text, based on the value of the selected option:\n\nThe value of myVar will be either dogs, tuts, or cars.\n\nform = {{user}}\n\nmaster = {{master}}\n\nThe novalidate attribute is new in HTML5. It disables any default browser validation.\n\nThe ng-app directive defines the AngularJS application.\n\nThe ng-controller directive defines the application controller.\n\nThe ng-model directive binds two input elements to the user object in the model.\n\nThe formCtrl controller sets initial values to the master object, and defines the reset() method.\n\nThe reset() method sets the user object equal to the master object.\n\nThe ng-click directive invokes the reset() method, only if the button is clicked.\n\nThe novalidate attribute is not needed for this application, but normally you will use it in AngularJS forms, to override standard HTML5 validation.",
    "code_examples": [
      "ng-model",
      "firstname",
      "ng-model",
      "firstname",
      "true",
      "false",
      "ng-model",
      "ng-model",
      "ng-model",
      "dogs",
      "tuts",
      "cars",
      "ng-model",
      "ng-model",
      "dogs",
      "tuts",
      "cars",
      "Example:\n\n    <input type=\"text\" ng-model=\"firstname\">\n",
      "Example:\n\n    <script>var app = angular.module('myApp', []);app.controller('formCtrl', \n    function($scope) {  $scope.firstname = \"John\";});\n    </script>",
      "Example:\n\n    <form>  First Name: <input type=\"text\" ng-model=\"firstname\">\n    </form><h1>You entered: {{firstname}}</h1>",
      "Example:\n\n     <form>  Check to show a header:  <input type=\"checkbox\" ng-model=\"myVar\"></form><h1 ng-show=\"myVar\">My \n    Header</h1>",
      "Example:\n\n    <form>  Pick a topic:  <input type=\"radio\" ng-model=\"myVar\" \n    value=\"dogs\">Dogs  <input type=\"radio\" ng-model=\"myVar\" value=\"tuts\">Tutorials\n     \n    <input type=\"radio\" ng-model=\"myVar\" value=\"cars\">Cars</form>",
      "Example:\n\n        <form>  Select a topic:  <select ng-model=\"myVar\">    \n        <option value=\"\">    <option value=\"dogs\">Dogs    \n        <option value=\"tuts\">Tutorials    <option \n        value=\"cars\">Cars  </select></form>",
      "Example:\n\n    <div ng-app=\"myApp\" ng-controller=\"formCtrl\">  <form \n    novalidate>    First Name:<br>    \n    <input type=\"text\" ng-model=\"user.firstName\"><br>    Last \n    Name:<br>    <input type=\"text\" ng-model=\"user.lastName\">\n        \n    <br><br>    <button ng-click=\"reset()\">RESET</button>  \n    </form>\n      <p>form = {{{user}}</p>\n      <p>master = {{{master}}</p></div><script>\n    var app =\n    angular.module('myApp', []);app.controller('formCtrl',  \n    function($scope) {\n      $scope.master = {firstName: \"John\", lastName: \"Doe\"};\n      $scope.reset = function() {    $scope.user \n    = angular.copy($scope.master);  };  $scope.reset();});\n    </script>\n"
    ],
    "summary": "Forms in AngularJS provides data-binding and validation of input controls.\n\nInput controls are the HTML input elements:\n\nInput controls provides data-binding by using the ng-model directive.\n\nThe application does now have a property named firstname.\n\nThe ng-model directive binds the input controller..."
  },
  {
    "title": "AngularJS Form Validation",
    "content": "AngularJS can validate input data.\n\nAngularJS offers client-side form validation.\n\nAngularJS monitors the state of the form and input fields (input, textarea, select), and lets you notify the user about the current state.\n\nAngularJS also holds information about whether they have been touched, or modified, or not.\n\nYou can use standard HTML5 attributes to validate input, or you can make your own validation functions.\n\nClient-side validation cannot alone secure user input. Server side validation is also necessary.\n\nUse the HTML5 attribute required to specify that the input field must be filled out:\n\nThe input field is required:\n\nUse the HTML5 type email to specify that the value must be an e-mail:\n\nThe input field has to be an e-mail:\n\nAngularJS is constantly updating the state of both the form and the input fields.\n\nInput fields have the following states:\n\nThey are all properties of the input field, and are either true or false.\n\nForms have the following states:\n\nThey are all properties of the form, and are either true or false.\n\nYou can use these states to show meaningful messages to the user. Example, if a field is required, and the user leaves it blank, you should give the user a warning:\n\nShow an error message if the field has been touched AND is empty:\n\nAngularJS adds CSS classes to forms and input fields depending on their states.\n\nThe following classes are added to, or removed from, input fields:\n\nThe following classes are added to, or removed from, forms:\n\nThe classes are removed if the value they represent is false.\n\nAdd styles for these classes to give your application a better and more intuitive user interface.\n\nApply styles, using standard CSS:\n\nForms can also be styled:\n\nApply styles for unmodified (pristine) forms, and for modified forms:\n\nTo create your own validation function is a bit more tricky; You have to add a new directive to your application, and deal with the validation inside a function with certain specified arguments.\n\nCreate your own directive, containing a custom validation function, and refer to it by using my-directive.\n\nThe field will only be valid if the value contains the character \"e\":\n\nIn HTML, the new directive will be referred to by using the attribute my-directive.\n\nIn the JavaScript we start by adding a new directive named myDirective.\n\nRemember, when naming a directive, you must use a camel case name, myDirective, but when invoking it, you must use - separated name, my-directive.\n\nThen, return an object where you specify that we require ngModel, which is the ngModelController.\n\nMake a linking function which takes some arguments, where the fourth argument, mCtrl, is the ngModelController,\n\nThen specify a function, in this case named myValidation, which takes one argument, this argument is the value of the input element.\n\nTest if the value contains the letter \"e\", and set the validity of the model controller to either true or false.\n\nAt last, mCtrl.$parsers.push(myValidation); will add the myValidation function to an array of other functions, which will be executed every time the input value changes.\n\nThe HTML form attribute novalidate is used to disable default browser validation.\n\nThe AngularJS directive ng-model binds the input elements to the model.\n\nThe model object has two properties: user and email.\n\nBecause of ng-show, the spans with color:red are displayed only when user or email is $dirty and $invalid.",
    "code_examples": [
      "required",
      "email",
      "$untouched",
      "$touched",
      "$pristine",
      "$dirty",
      "$invalid",
      "$valid",
      "true",
      "false",
      "$pristine",
      "$dirty",
      "$invalid",
      "$valid",
      "$submitted",
      "true",
      "false",
      "ng-untouched",
      "ng-touched",
      "ng-pristine",
      "ng-dirty",
      "ng-valid",
      "ng-invalid",
      "ng-valid-key",
      "ng-valid-required",
      "ng-invalid-key",
      "ng-invalid-required",
      "ng-pristine",
      "ng-dirty",
      "ng-valid",
      "ng-invalid",
      "ng-valid-key",
      "ng-valid-required",
      "ng-invalid-key",
      "ng-invalid-required",
      "false",
      "my-directive",
      "\nmy-directive",
      "myDirective",
      "\nmyDirective",
      "-",
      "my-directive",
      "ngModel",
      "mCtrl",
      "ngModelController",
      "myValidation",
      "true",
      "false",
      "mCtrl.$parsers.push(myValidation);",
      "\nmyValidation",
      "Example:\n\n    <form name=\"myForm\">  <input name=\"myInput\" ng-model=\"myInput\" \n    required></form><p>The input's valid state is:</p>\n    <h1>{{myForm.myInput.$valid}}</h1>",
      "Example:\n\n    <form name=\"myForm\">  <input name=\"myInput\" ng-model=\"myInput\" \n    type=\"email\"></form><p>The input's valid state is:</p>\n    <h1>{{myForm.myInput.$valid}}</h1>",
      "Example:\n\n    <input name=\"myName\" ng-model=\"myName\" required><span ng-show=\"myForm.myName.$touched \n    && myForm.myName.$invalid\">The name is required.</span>",
      "Example:\n\n\n    <style>\n\n\n    input.ng-invalid {  background-color: pink;\n    }input.ng-valid {  background-color: lightgreen;\n    }\n\n\n</style>\n\n",
      "Example:\n\n\n    <style>\n\n\n    form.ng-pristine {  background-color: lightblue;}\n    form.ng-dirty {  background-color: pink;}\n\n\n</style>\n\n",
      "Example:\n\n\n    <form name=\"myForm\"><input name=\"myInput\" ng-model=\"myInput\" required \n    my-directive></form><script>\n\n\n    var app = angular.module('myApp', \n    []);app.directive('myDirective', function() {  return {    \n    require: 'ngModel',    link: function(scope, element, \n    attr, mCtrl) {      function myValidation(value) \n    {        if (value.indexOf(\"e\") > -1) \n    {          mCtrl.$setValidity('charE', \n    true);        } else {          \n    mCtrl.$setValidity('charE', false);        \n    }        return value;      \n    }      mCtrl.$parsers.push(myValidation);    \n    }  };});\n\n\n    </script>\n\n",
      "Example:\n\n    <!DOCTYPE html><html><script src=\"https://ajax.googleapis.com/ajax/libs/angularjs/1.6.9/angular.min.js\"></script>\n    <body>\n<h2>Validation Example</h2><form  ng-app=\"myApp\"  \n    ng-controller=\"validateCtrl\"name=\"myForm\" novalidate>\n    <p>Username:<br>  <input type=\"text\" name=\"user\" ng-model=\"user\" \n    required>  <span style=\"color:red\" ng-show=\"myForm.user.$dirty && \n    myForm.user.$invalid\">  <span ng-show=\"myForm.user.$error.required\">Username \n    is required.</span>  </span></p><p>Email:<br>  \n    <input type=\"email\" name=\"email\" ng-model=\"email\" required>  <span \n    style=\"color:red\" ng-show=\"myForm.email.$dirty && myForm.email.$invalid\">  \n    <span ng-show=\"myForm.email.$error.required\">Email is required.</span>  \n    <span ng-show=\"myForm.email.$error.email\">Invalid email address.</span>  \n    </span></p><p>  <input type=\"submit\"  \n    ng-disabled=\"myForm.user.$dirty && myForm.user.$invalid ||  \n    myForm.email.$dirty && myForm.email.$invalid\"></p></form>\n<script>var app = angular.module('myApp', []);app.controller('validateCtrl', \n    function($scope) {  $scope.user = 'John Doe';  $scope.email = 'john.doe@gmail.com';\n    });</script></body></html>\n"
    ],
    "summary": "AngularJS can validate input data.\n\nAngularJS offers client-side form validation.\n\nAngularJS monitors the state of the form and input fields (input, textarea, select), and lets you notify the user about the current state.\n\nAngularJS also holds information about whether they have been touched, or mod..."
  },
  {
    "title": "AngularJS API",
    "content": "API stands for Application Programming Interface.\n\nThe AngularJS Global API is a set of global JavaScript functions for performing common tasks like:\n\nThe Global API functions are accessed using the angular object.\n\nBelow is a list of some common API functions:",
    "code_examples": [
      "Example:\n\n<div ng-app=\"myApp\" ng-controller=\"myCtrl\">\n  \n <p>{{ x1 }}</p>  <p>{{ x2 }}</p></div>\n<script>\nvar app = angular.module('myApp', []);\napp.controller('myCtrl', function($scope) {\n \n$scope.x1 = \"JOHN\";\n \n$scope.x2 = angular.lowercase($scope.x1);\n});\n</script>\n",
      "Example:\n\n<div ng-app=\"myApp\" ng-controller=\"myCtrl\">\n  \n <p>{{ x1 }}</p>  <p>{{ x2 }}</p></div>\n<script>\nvar app = angular.module('myApp', []);\napp.controller('myCtrl', function($scope) {\n \n$scope.x1 = \"John\";\n \n$scope.x2 = angular.uppercase($scope.x1);\n});\n</script>\n",
      "Example:\n\n<div ng-app=\"myApp\" ng-controller=\"myCtrl\">\n  \n <p>{{ x1 }}</p>  <p>{{ x2 }}</p></div>\n<script>\nvar app = angular.module('myApp', []);\napp.controller('myCtrl', function($scope) {\n \n$scope.x1 = \"JOHN\";\n \n$scope.x2 = angular.isString($scope.x1);\n});\n</script>\n",
      "Example:\n\n<div ng-app=\"myApp\" ng-controller=\"myCtrl\">\n  \n <p>{{ x1 }}</p>  <p>{{ x2 }}</p></div>\n<script>\nvar app = angular.module('myApp', []);\napp.controller('myCtrl', function($scope) {\n \n$scope.x1 = \"JOHN\";\n \n$scope.x2 = angular.isNumber($scope.x1);\n});\n</script>\n"
    ],
    "summary": "API stands for Application Programming Interface.\n\nThe AngularJS Global API is a set of global JavaScript functions for performing common tasks like:\n\nThe Global API functions are accessed using the angular object.\n\nBelow is a list of some common API functions:"
  },
  {
    "title": "AngularJS and W3.CSS",
    "content": "You can easily use w3.css style sheet together with AngularJS. This chapter demonstrates how.\n\nTo include W3.CSS in your AngularJS application, add the following line to the head of your document:\n\nIf you want to study W3.CSS, visit our W3.CSS Tutorial.Below is a complete HTML example, with all AngularJS directives and W3.CSS classes explained. HTML Code <!DOCTYPE html><html><link rel=\"stylesheet\" href=\"https://www.w3schools.com/w3css/4/w3.css\"> <script src=\"https://ajax.googleapis.com/ajax/libs/angularjs/1.6.9/angular.min.js\"></script> <body ng-app=\"myApp\" ng-controller=\"userCtrl\"><div class=\"w3-container\"><h3>Users</h3><table class=\"w3-table w3-bordered w3-striped\"> <tr> <th>Edit</th> <th>First Name</th> <th>Last Name</th> </tr> <tr ng-repeat=\"user in users\"> <td> <button class=\"w3-btn w3-ripple\" ng-click=\"editUser(user.id)\">&#9998; Edit</button> </td> <td>{{ user.fName }}</td> <td>{{ user.lName }}</td> </tr></table><br><button class=\"w3-btn w3-green w3-ripple\" ng-click=\"editUser('new')\">&#9998; Create New User</button><form ng-hide=\"hideform\"> <h3 ng-show=\"edit\">Create New User:</h3> <h3 ng-hide=\"edit\">Edit User:</h3> <label>First Name:</label> <input class=\"w3-input w3-border\" type=\"text\" ng-model=\"fName\" ng-disabled=\"!edit\" placeholder=\"First Name\"> <br> <label>Last Name:</label> <input class=\"w3-input w3-border\" type=\"text\" ng-model=\"lName\" ng-disabled=\"!edit\" placeholder=\"Last Name\"> <br> <label>Password:</label> <input class=\"w3-input w3-border\" type=\"password\" ng-model=\"passw1\" placeholder=\"Password\"> <br> <label>Repeat:</label> <input class=\"w3-input w3-border\" type=\"password\" ng-model=\"passw2\" placeholder=\"Repeat Password\"> <br><button class=\"w3-btn w3-green w3-ripple\" ng-disabled=\"error || incomplete\">&#10004; Save Changes</button></form></div><script src= \"myUsers.js\"></script> </body></html> Try it Yourself » Directives (Used Above) Explained AngularJS Directive Description <body ng-app Defines an application for the <body> element <body ng-controller Defines a controller for the <body> element <tr ng-repeat Repeats the <tr> element for each user in users <button ng-click Invoke the function editUser() when the <button> element is clicked <h3 ng-show Show the <h3>s element if edit = true <h3 ng-hide Hide the form if hideform = true, and hide the <h3> element if edit = true <input ng-model Bind the <input> element to the application <button ng-disabled Disables the <button> element if error or incomplete = true W3.CSS Classes Explained Element Class Defines <div> w3-container A content container <table> w3-table A table <table> w3-bordered A bordered table <table> w3-striped A striped table <button> w3-btn A button <button> w3-green A green button <button> w3-ripple A ripple effect when you click the button <input> w3-input An input field <input> w3-border A border on the input field JavaScript Code myUsers.js angular.module('myApp', []).controller('userCtrl', function($scope) {$scope.fName = '';$scope.lName = '';$scope.passw1 = '';$scope.passw2 = ''; $scope.users = [{id:1, fName:'Hege', lName:\"Pege\" }, {id:2, fName:'Kim', lName:\"Pim\" },{id:3, fName:'Sal', lName:\"Smith\" }, {id:4, fName:'Jack', lName:\"Jones\" },{id:5, fName:'John', lName:\"Doe\" },{id:6, fName:'Peter',lName:\"Pan\" }];$scope.edit = true;$scope.error = false; $scope.incomplete = false; $scope.hideform = true; $scope.editUser = function(id) { $scope.hideform = false; if (id == 'new') { $scope.edit = true; $scope.incomplete = true; $scope.fName = ''; $scope.lName = ''; } else { $scope.edit = false; $scope.fName = $scope.users[id-1].fName; $scope.lName = $scope.users[id-1].lName; }};$scope.$watch('passw1',function() {$scope.test();});$scope.$watch('passw2',function() {$scope.test();}); $scope.$watch('fName', function() {$scope.test();});$scope.$watch('lName', function() {$scope.test();});$scope.test = function() { if ($scope.passw1 !== $scope.passw2) { $scope.error = true; } else { $scope.error = false; } $scope.incomplete = false; if ($scope.edit && (!$scope.fName.length || !$scope.lName.length || !$scope.passw1.length || !$scope.passw2.length)) { $scope.incomplete = true; }};}); JavaScript Code Explained Scope Properties Used for $scope.fName Model variable (user first name) $scope.lName Model variable (user last name) $scope.passw1 Model variable (user password 1) $scope.passw2 Model variable (user password 2) $scope.users Model variable (array of users) $scope.edit Set to true when user clicks on 'Create user'. $scope.hideform Set to false when user clicks on 'Edit' or 'Create user'. $scope.error Set to true if passw1 not equal passw2 $scope.incomplete Set to true if any field is empty (length = 0) $scope.editUser Sets model variables $scope.$watch Watches model variables $scope.test Tests model variables for errors and incompleteness ❮ Previous Next ❯ ★ +1 Track your progress - it's free! Log in Sign Up\n\nBelow is a complete HTML example, with all AngularJS directives and W3.CSS classes explained. HTML Code <!DOCTYPE html><html><link rel=\"stylesheet\" href=\"https://www.w3schools.com/w3css/4/w3.css\"> <script src=\"https://ajax.googleapis.com/ajax/libs/angularjs/1.6.9/angular.min.js\"></script> <body ng-app=\"myApp\" ng-controller=\"userCtrl\"><div class=\"w3-container\"><h3>Users</h3><table class=\"w3-table w3-bordered w3-striped\"> <tr> <th>Edit</th> <th>First Name</th> <th>Last Name</th> </tr> <tr ng-repeat=\"user in users\"> <td> <button class=\"w3-btn w3-ripple\" ng-click=\"editUser(user.id)\">&#9998; Edit</button> </td> <td>{{ user.fName }}</td> <td>{{ user.lName }}</td> </tr></table><br><button class=\"w3-btn w3-green w3-ripple\" ng-click=\"editUser('new')\">&#9998; Create New User</button><form ng-hide=\"hideform\"> <h3 ng-show=\"edit\">Create New User:</h3> <h3 ng-hide=\"edit\">Edit User:</h3> <label>First Name:</label> <input class=\"w3-input w3-border\" type=\"text\" ng-model=\"fName\" ng-disabled=\"!edit\" placeholder=\"First Name\"> <br> <label>Last Name:</label> <input class=\"w3-input w3-border\" type=\"text\" ng-model=\"lName\" ng-disabled=\"!edit\" placeholder=\"Last Name\"> <br> <label>Password:</label> <input class=\"w3-input w3-border\" type=\"password\" ng-model=\"passw1\" placeholder=\"Password\"> <br> <label>Repeat:</label> <input class=\"w3-input w3-border\" type=\"password\" ng-model=\"passw2\" placeholder=\"Repeat Password\"> <br><button class=\"w3-btn w3-green w3-ripple\" ng-disabled=\"error || incomplete\">&#10004; Save Changes</button></form></div><script src= \"myUsers.js\"></script> </body></html> Try it Yourself » Directives (Used Above) Explained AngularJS Directive Description <body ng-app Defines an application for the <body> element <body ng-controller Defines a controller for the <body> element <tr ng-repeat Repeats the <tr> element for each user in users <button ng-click Invoke the function editUser() when the <button> element is clicked <h3 ng-show Show the <h3>s element if edit = true <h3 ng-hide Hide the form if hideform = true, and hide the <h3> element if edit = true <input ng-model Bind the <input> element to the application <button ng-disabled Disables the <button> element if error or incomplete = true W3.CSS Classes Explained Element Class Defines <div> w3-container A content container <table> w3-table A table <table> w3-bordered A bordered table <table> w3-striped A striped table <button> w3-btn A button <button> w3-green A green button <button> w3-ripple A ripple effect when you click the button <input> w3-input An input field <input> w3-border A border on the input field JavaScript Code myUsers.js angular.module('myApp', []).controller('userCtrl', function($scope) {$scope.fName = '';$scope.lName = '';$scope.passw1 = '';$scope.passw2 = ''; $scope.users = [{id:1, fName:'Hege', lName:\"Pege\" }, {id:2, fName:'Kim', lName:\"Pim\" },{id:3, fName:'Sal', lName:\"Smith\" }, {id:4, fName:'Jack', lName:\"Jones\" },{id:5, fName:'John', lName:\"Doe\" },{id:6, fName:'Peter',lName:\"Pan\" }];$scope.edit = true;$scope.error = false; $scope.incomplete = false; $scope.hideform = true; $scope.editUser = function(id) { $scope.hideform = false; if (id == 'new') { $scope.edit = true; $scope.incomplete = true; $scope.fName = ''; $scope.lName = ''; } else { $scope.edit = false; $scope.fName = $scope.users[id-1].fName; $scope.lName = $scope.users[id-1].lName; }};$scope.$watch('passw1',function() {$scope.test();});$scope.$watch('passw2',function() {$scope.test();}); $scope.$watch('fName', function() {$scope.test();});$scope.$watch('lName', function() {$scope.test();});$scope.test = function() { if ($scope.passw1 !== $scope.passw2) { $scope.error = true; } else { $scope.error = false; } $scope.incomplete = false; if ($scope.edit && (!$scope.fName.length || !$scope.lName.length || !$scope.passw1.length || !$scope.passw2.length)) { $scope.incomplete = true; }};}); JavaScript Code Explained Scope Properties Used for $scope.fName Model variable (user first name) $scope.lName Model variable (user last name) $scope.passw1 Model variable (user password 1) $scope.passw2 Model variable (user password 2) $scope.users Model variable (array of users) $scope.edit Set to true when user clicks on 'Create user'. $scope.hideform Set to false when user clicks on 'Edit' or 'Create user'. $scope.error Set to true if passw1 not equal passw2 $scope.incomplete Set to true if any field is empty (length = 0) $scope.editUser Sets model variables $scope.$watch Watches model variables $scope.test Tests model variables for errors and incompleteness ❮ Previous Next ❯ ★ +1 Track your progress - it's free! Log in Sign Up",
    "code_examples": [
      "Example:\n\n<link rel=\"stylesheet\" href=\"https://www.w3schools.com/w3css/4/w3.css\">\n",
      "Example:\n\n    <!DOCTYPE html><html><link rel=\"stylesheet\" href=\"https://www.w3schools.com/w3css/4/w3.css\">\n    <script src=\"https://ajax.googleapis.com/ajax/libs/angularjs/1.6.9/angular.min.js\"></script>\n    <body ng-app=\"myApp\" ng-controller=\"userCtrl\"><div \n    class=\"w3-container\"><h3>Users</h3><table class=\"w3-table \n    w3-bordered w3-striped\">  <tr>    <th>Edit</th>    \n    <th>First Name</th>    <th>Last Name</th>  </tr>  \n    <tr ng-repeat=\"user in users\">    <td>      \n    <button class=\"w3-btn w3-ripple\" ng-click=\"editUser(user.id)\">&#9998; \n    Edit</button>    </td>    <td>{{ \n    user.fName }}</td>    <td>{{ user.lName }}</td>  \n    </tr></table><br><button class=\"w3-btn w3-green w3-ripple\" \n    ng-click=\"editUser('new')\">&#9998; Create New User</button><form \n    ng-hide=\"hideform\">  <h3 ng-show=\"edit\">Create New \n    User:</h3>  <h3 ng-hide=\"edit\">Edit User:</h3>    <label>First \n    Name:</label>    <input class=\"w3-input w3-border\" \n    type=\"text\" ng-model=\"fName\" ng-disabled=\"!edit\" placeholder=\"First Name\">  <br>    <label>Last Name:</label>    <input \n    class=\"w3-input w3-border\" type=\"text\" ng-model=\"lName\" ng-disabled=\"!edit\" \n    placeholder=\"Last Name\">  <br>    <label>Password:</label>    <input \n    class=\"w3-input w3-border\" type=\"password\" ng-model=\"passw1\" \n    placeholder=\"Password\">  <br>    <label>Repeat:</label>    <input \n    class=\"w3-input w3-border\" type=\"password\" ng-model=\"passw2\" \n    placeholder=\"Repeat Password\"> <br><button \n    class=\"w3-btn w3-green w3-ripple\" ng-disabled=\"error || incomplete\">&#10004; \n    Save Changes</button></form></div><script src= \"myUsers.js\"></script>\n</body></html>",
      "myUsers.js:\n\n angular.module('myApp', []).controller('userCtrl',  \n function($scope) {$scope.fName \n= '';$scope.lName = '';$scope.passw1 = '';$scope.passw2 = '';\n    $scope.users = [{id:1, fName:'Hege', lName:\"Pege\" },\n{id:2, fName:'Kim',  lName:\"Pim\" },{id:3, fName:'Sal',  lName:\"Smith\" },\n{id:4, fName:'Jack', lName:\"Jones\" },{id:5, fName:'John', lName:\"Doe\" \n},{id:6, fName:'Peter',lName:\"Pan\" }];$scope.edit = true;$scope.error = false;\n$scope.incomplete = false; $scope.hideform = true; $scope.editUser = \nfunction(id) { \n$scope.hideform = false;  if (id == 'new') {\n    $scope.edit = true;    $scope.incomplete \n= true;    $scope.fName = '';    $scope.lName \n= '';    } else {    $scope.edit = false;    $scope.fName \n= $scope.users[id-1].fName;    $scope.lName \n= $scope.users[id-1].lName;   }};$scope.$watch('passw1',function() \n{$scope.test();});$scope.$watch('passw2',function() {$scope.test();});\n$scope.$watch('fName', function() {$scope.test();});$scope.$watch('lName', function() {$scope.test();});$scope.test = function() {  if \n($scope.passw1 !== $scope.passw2) {    $scope.error = \ntrue;    } else {    $scope.error = \nfalse;  }  $scope.incomplete = false;  if ($scope.edit \n&& (!$scope.fName.length ||  !$scope.lName.length ||  \n!$scope.passw1.length || !$scope.passw2.length)) {     $scope.incomplete = true;  }};});"
    ],
    "summary": "You can easily use w3.css style sheet together with AngularJS. This chapter demonstrates how.\n\nTo include W3.CSS in your AngularJS application, add the following line to the head of your document:\n\nIf you want to study W3.CSS, visit our W3.CSS Tutorial.Below is a complete HTML example, with all Angu..."
  },
  {
    "title": "AngularJS Includes",
    "content": "With AngularJS, you can include HTML from an external file.\n\nWith AngularJS, you can include HTML content using the ng-include directive:\n\nThe HTML files you include with the ng-include directive, can also contain AngularJS code:\n\nInclude the file \"myTable.htm\" in your web page, and all AngularJS code will be executed, even the code inside the included file:\n\nBy default, the ng-include directive does not allow you to include files from other domains.\n\nTo include files from another domain, you can add a whitelist of legal files and/or domains in the config function of your application:\n\nBe sure that the server on the destination allows cross domain file access.",
    "code_examples": [
      "Example:\n\n    <body ng-app=\"\"><div ng-include=\"'myFile.htm'\"></div>\n    </body> ",
      "myTable.htm::\n\n    <table>  <tr ng-repeat=\"x in \n    names\">    <td>{{ x.Name }}</td>    <td>{{ x.Country }}</td>  </tr>\n    </table>",
      "Example:\n\n\n    <body><div ng-app=\"myApp\" ng-controller=\"customersCtrl\">   \n    <div ng-include=\"'myTable.htm'\"></div></div><script>\n\nvar app = angular.module('myApp', []);\n    app.controller('customersCtrl', function($scope, $http) {  $http.get(\"customers.php\").then(function (response) {\n      $scope.names = response.data.records;  });});\n    \n    </script>",
      "Example::\n\n\n    <body ng-app=\"myApp\"><div ng-include=\"'https://tryit.w3schools.com/angular_include.php'\"></div>\n<script>\nvar app = angular.module('myApp', [])app.config(function($sceDelegateProvider) \n    {  $sceDelegateProvider.resourceUrlWhitelist([    'https://tryit.w3schools.com/**'\n    \n    ]);});\n</script></body>"
    ],
    "summary": "With AngularJS, you can include HTML from an external file.\n\nWith AngularJS, you can include HTML content using the ng-include directive:\n\nThe HTML files you include with the ng-include directive, can also contain AngularJS code:\n\nInclude the file \"myTable.htm\" in your web page, and all AngularJS co..."
  },
  {
    "title": "AngularJS Animations",
    "content": "AngularJS provides animated transitions, with help from CSS.\n\nAn animation is when the transformation of an HTML element gives you an illusion of motion.\n\nCheck the checkbox to hide the DIV:\n\nApplications should not be filled with animations, but some animations can make the application easier to understand.\n\nTo make your applications ready for animations, you must include the AngularJS Animate library:\n\nThen you must refer to the ngAnimate module in your application:\n\nOr if your application has a name, add ngAnimate as a dependency in your application module:\n\nThe ngAnimate module adds and removes classes.\n\nThe ngAnimate module does not animate your HTML elements, but when ngAnimate notice certain events, like hide or show of an HTML element, the element gets some pre-defined classes which can be used to make animations.\n\nThe directives in AngularJS who add/remove classes are:\n\nThe ng-show and ng-hide directives adds or removes a ng-hide class value.\n\nThe other directives adds a ng-enter class value when they enter the DOM, and a ng-leave attribute when they are removed from the DOM.\n\nThe ng-repeat directive also adds a ng-move class value when the HTML element changes position.\n\nIn addition, during the animation, the HTML element will have a set of class values, which will be removed when the animation has finished. Example: the ng-hide directive will add these class values:\n\nWe can use CSS transitions or CSS animations to animate HTML elements. This tutorial will show you both.\n\nTo learn more about CSS Animation, study our CSS Transition Tutorial and our CSS Animation Tutorial.\n\nCSS transitions allows you to change CSS property values smoothly, from one value to another, over a given duration:\n\nWhen the DIV element gets the .ng-hide class, the transition will take 0.5 seconds, and the height will smoothly change from 100px to 0:\n\nCSS Animations allows you to change CSS property values smoothly, from one value to another, over a given duration:\n\nWhen the DIV element gets the .ng-hide class, the myChange animation will run, which will smoothly change the height from 100px to 0:",
    "code_examples": [
      "ngAnimate",
      "ngAnimate",
      "ng-show",
      "ng-hide",
      "ng-class",
      "ng-view",
      "ng-include",
      "ng-repeat",
      "ng-if",
      "ng-switch",
      "ng-show",
      "ng-hide",
      "ng-hide",
      "ng-enter",
      "ng-leave",
      "ng-repeat",
      "ng-move",
      "ng-hide",
      "ng-animate",
      "ng-hide-animate",
      "ng-hide-add",
      "ng-hide-remove",
      "ng-hide-add-active",
      "ng-hide-remove-active",
      ".ng-hide",
      ".ng-hide",
      "myChange",
      "Example::\n\n    <body ng-app=\"ngAnimate\">Hide the DIV: <input type=\"checkbox\" ng-model=\"myCheck\">\n<div ng-hide=\"myCheck\"></div></body>",
      "Example:\n\n    <script src=\"https://ajax.googleapis.com/ajax/libs/angularjs/1.6.9/angular-animate.js\"></script> ",
      "Example:\n\n    <body ng-app=\"ngAnimate\"> ",
      "Example:\n\n\n    <body ng-app=\"myApp\"><h1>Hide the DIV: <input type=\"checkbox\" ng-model=\"myCheck\"></h1>\n<div ng-hide=\"myCheck\"></div><script>\n\nvar app = \n    angular.module('myApp', ['ngAnimate']);\n</script>",
      "Example::\n\n    <style>div {  transition: all linear 0.5s;  background-color: lightblue;  height: 100px;}.ng-hide \n    {  height: 0;}</style>",
      "Example::\n\n    <style>@keyframes myChange {  from {    \n    height: 100px;  } to {    height: 0;\n      }}div {  height: 100px;  background-color: lightblue;}\n    div.ng-hide {  animation: 0.5s myChange;}</style>"
    ],
    "summary": "AngularJS provides animated transitions, with help from CSS.\n\nAn animation is when the transformation of an HTML element gives you an illusion of motion.\n\nCheck the checkbox to hide the DIV:\n\nApplications should not be filled with animations, but some animations can make the application easier to un..."
  },
  {
    "title": "AngularJS Routing",
    "content": "The ngRoute module helps your application to become a Single Page Application.\n\nIf you want to navigate to different pages in your application, but you also want the application to be a SPA (Single Page Application), with no page reloading, you can use the ngRoute module.\n\nThe ngRoute module routes your application to different pages without reloading the entire application.\n\nNavigate to \"red.htm\", \"green.htm\", and \"blue.htm\":\n\nTo make your applications ready for routing, you must include the AngularJS Route module:\n\nThen you must add the ngRoute as a dependency in the application module:\n\nNow your application has access to the route module, which provides the $routeProvider.\n\nUse the $routeProvider to configure different routes in your application:\n\nYour application needs a container to put the content provided by the routing.\n\nThis container is the ng-view directive.\n\nThere are three different ways to include the ng-view directive in your application:\n\nApplications can only have one ng-view directive, and this will be the placeholder for all views provided by the route.\n\nWith the $routeProvider you can define what page to display when a user clicks a link.\n\nDefine a $routeProvider:\n\nDefine the $routeProvider using the config method of your application. Work registered in the config method will be performed when the application is loading.\n\nWith the $routeProvider you can also define a controller for each \"view\".\n\nAdd controllers:\n\nThe \"london.htm\" and \"paris.htm\" are normal HTML files, which you can add AngularJS expressions as you would with any other HTML sections of your AngularJS application.\n\nThe files looks like this:\n\nlondon.htm\n\nparis.htm\n\nIn the previous examples we have used the templateUrl property in the $routeProvider.when method.\n\nYou can also use the template property, which allows you to write HTML directly in the property value, and not refer to a page.\n\nWrite templates:\n\nIn the previous examples we have used the when method of the $routeProvider.\n\nYou can also use the otherwise method, which is the default route when none of the others get a match.\n\nIf neither the \"Banana\" nor the \"Tomato\" link has been clicked, let them know:",
    "code_examples": [
      "ngRoute",
      "ngRoute",
      "ngRoute",
      "ngRoute",
      "$routeProvider",
      "$routeProvider",
      "ng-view",
      "ng-view",
      "ng-view",
      "$routeProvider",
      "$routeProvider",
      "$routeProvider",
      "config",
      "config",
      "$routeProvider",
      "templateUrl",
      "$routeProvider.when",
      "template",
      "when",
      "$routeProvider",
      "otherwise",
      "Example::\n\n    <body ng-app=\"myApp\"><p><a href=\"#/!\">Main</a></p><a href=\"#!red\">Red</a>\n    <a href=\"#!green\">Green</a><a href=\"#!blue\">Blue</a><div ng-view></div>\n<script>var app = angular.module(\"myApp\", [\"ngRoute\"]);\n    app.config(function($routeProvider) {  $routeProvider  .when(\"/\", {    templateUrl : \"main.htm\"  })\n      .when(\"/red\", {    templateUrl : \"red.htm\"  })\n      .when(\"/green\", {    templateUrl : \"green.htm\"   \n    })  .when(\"/blue\", {    templateUrl : \"blue.htm\"   \n    });});</script></body>",
      "Example:\n\n    <script src=\"https://ajax.googleapis.com/ajax/libs/angularjs/1.6.9/angular-route.js\"></script> ",
      "Example:\n\n    var app = angular.module(\"myApp\", [\"ngRoute\"]);",
      "Example:\n\n    app.config(function($routeProvider) {  $routeProvider  .when(\"/\", {\n        templateUrl : \"main.htm\"  })  .when(\"/red\", {    \n    templateUrl : \"red.htm\"  })  .when(\"/green\", {    templateUrl : \n    \"green.htm\"  })  .when(\"/blue\", {    templateUrl : \"blue.htm\"\n      });});\n    ",
      "Example::\n\n    <div ng-view></div> ",
      "Example::\n\n    <ng-view></ng-view> ",
      "Example::\n\n    <div \n    class=\"ng-view\"></div> ",
      "Example::\n\n    var app = angular.module(\"myApp\", [\"ngRoute\"]);\n    app.config(function($routeProvider) {  $routeProvider  .when(\"/\", {\n        templateUrl : \"main.htm\"  })  .when(\"/london\", {\n        templateUrl : \"london.htm\"  })  .when(\"/paris\", {    templateUrl : \"paris.htm\"   \n    });});",
      "Example::\n\n    var app = angular.module(\"myApp\", [\"ngRoute\"]);\n    app.config(function($routeProvider) {  $routeProvider  .when(\"/\", {    templateUrl : \"main.htm\"  })  .when(\"/london\", {    templateUrl : \"london.htm\",    \n    controller : \"londonCtrl\"  })  .when(\"/paris\", {    templateUrl : \"paris.htm\",\n        \n    controller : \"parisCtrl\"   \n    });});app.controller(\"londonCtrl\", function ($scope) {  $scope.msg = \"I love London\";});app.controller(\"parisCtrl\", function \n    ($scope) {  $scope.msg = \"I love Paris\";});",
      "Example:\n\n    <h1>London</h1><h3>London is the capital city of England.</h3><p>It \n    is the most populous city in the United Kingdom, with a metropolitan area of \n    over 13 million inhabitants.</p><p>{{msg}}</p>",
      "Example:\n\n    <h1>Paris</h1><h3>Paris is the capital city of France.</h3><p>The Paris area is one of the largest population centers in Europe, with more than 12 million inhabitants.</p><p>{{msg}}</p>",
      "Example::\n\n    var app = angular.module(\"myApp\", [\"ngRoute\"]);\n    app.config(function($routeProvider) {  $routeProvider  .when(\"/\", {\n        template : \"<h1>Main</h1><p>Click \n    on the links to change this content</p>\"  })  .when(\"/banana\", {\n        template : \"<h1>Banana</h1><p>Bananas \n    contain around 75% water.</p>\"  })  .when(\"/tomato\", {    template : \"<h1>Tomato</h1><p>Tomatoes \n    contain around 95% water.</p>\"  });});",
      "Example::\n\n    var app = angular.module(\"myApp\", [\"ngRoute\"]);\n    app.config(function($routeProvider) {  $routeProvider  .when(\"/banana\", {    template : \"<h1>Banana</h1><p>Bananas \n    contain around 75% water.</p>\"  })  .when(\"/tomato\", {    template : \"<h1>Tomato</h1><p>Tomatoes \n    contain around 95% water.</p>\"   \n    })  .otherwise({    template : \"<h1>None</h1><p>Nothing \n    has been selected</p>\"  });});"
    ],
    "summary": "The ngRoute module helps your application to become a Single Page Application.\n\nIf you want to navigate to different pages in your application, but you also want the application to be a SPA (Single Page Application), with no page reloading, you can use the ngRoute module.\n\nThe ngRoute module routes ..."
  },
  {
    "title": "AngularJS Application",
    "content": "It is time to create a real AngularJS Application.\n\nLets use some of the AngularJS features to make a shopping list, where you can add or remove items:\n\n{{errortext}}\n\nStart by making an application called myShoppingList, and add a controller named myCtrl to it.\n\nThe controller adds an array named products to the current $scope.\n\nIn the HTML, we use the ng-repeat directive to display a list using the items in the array.\n\nSo far we have made an HTML list based on the items of an array:\n\nIn the HTML, add a text field, and bind it to the application with the ng-model directive.\n\nIn the controller, make a function named addItem, and use the value of the addMe input field to add an item to the products array.\n\nAdd a button, and give it an ng-click directive that will run the addItem function when the button is clicked.\n\nNow we can add items to our shopping list:\n\nWe also want to be able to remove items from the shopping list.\n\nIn the controller, make a function named removeItem, which takes the index of the item you want to remove, as a parameter.\n\nIn the HTML, make a <span> element for each item, and give them an ng-click directive which calls the removeItem function with the current $index.\n\nNow we can remove items from our shopping list:\n\nThe application has some errors, like if you try to add the same item twice, the application crashes. Also, it should not be allowed to add empty items.\n\nWe will fix that by checking the value before adding new items.\n\nIn the HTML, we will add a container for error messages, and write an error message when someone tries to add an existing item.\n\nA shopping list, with the possibility to write error messages:\n\nThe application works, but could use a better design. We use the W3.CSS stylesheet to style our application.\n\nAdd the W3.CSS stylesheet, and include the proper classes throughout the application, and the result will be the same as the shopping list at the top of this page.\n\nStyle your application using the W3.CSS stylesheet:",
    "code_examples": [
      "myShoppingList",
      "myCtrl",
      "products",
      "$scope",
      "ng-repeat",
      "ng-model",
      "addItem",
      "addMe",
      "products",
      "ng-click",
      "addItem",
      "removeItem",
      "<span>",
      "ng-click",
      "removeItem",
      "$index",
      "Example:\n\n\n    <script>\n\n\n    var app = angular.module(\"myShoppingList\", []); \n    app.controller(\"myCtrl\", function($scope) {  $scope.products \n    = [\"Milk\", \"Bread\", \"Cheese\"];});\n\n\n</script><div ng-app=\"myShoppingList\" \n    ng-controller=\"myCtrl\">  <ul>    \n    <li ng-repeat=\"x in products\">{{x}}</li>  </ul>\n    </div>\n\n",
      "Example:\n\n\n    <script>\n\n\n    var app = angular.module(\"myShoppingList\", []); \n    app.controller(\"myCtrl\", function($scope) {  $scope.products \n    = [\"Milk\", \"Bread\", \"Cheese\"];  \n    $scope.addItem = function () {    $scope.products.push($scope.addMe);\n      \n    } });\n\n\n\n</script><div ng-app=\"myShoppingList\" \n    ng-controller=\"myCtrl\">  <ul>    \n    <li ng-repeat=\"x in products\">{{x}}</li>  </ul>\n  <input ng-model=\"addMe\">  \n    <button ng-click=\"addItem()\">Add</button>\n</div>\n\n",
      "Example:\n\n\n    <script>\n\n\n    var app = angular.module(\"myShoppingList\", []); \n    app.controller(\"myCtrl\", function($scope) {  $scope.products \n    = [\"Milk\", \"Bread\", \"Cheese\"];  $scope.addItem = function () {    $scope.products.push($scope.addMe);\n      }  $scope.removeItem = function (x) {    \n    $scope.products.splice(x, 1);  } });\n\n\n\n</script><div ng-app=\"myShoppingList\" \n    ng-controller=\"myCtrl\">  <ul>    <li ng-repeat=\"x in products\">      {{x}}<span ng-click=\"removeItem($index)\">&times;</span>    </li>  </ul>\n      <input ng-model=\"addMe\">  <button ng-click=\"addItem()\">Add</button>\n    </div>\n\n",
      "Example:\n\n\n    <script>\n\n\n    var app = angular.module(\"myShoppingList\", []); \n    app.controller(\"myCtrl\", function($scope) {  $scope.products \n    = [\"Milk\", \"Bread\", \"Cheese\"];  \n    $scope.addItem = function () {    \n    $scope.errortext = \"\";    \n    if (!$scope.addMe) {return;}    if ($scope.products.indexOf($scope.addMe) \n    == -1) {      \n    $scope.products.push($scope.addMe);    \n    } else {      \n    $scope.errortext = \"The item is already \n    in your shopping list.\";    }\n  \n    }  $scope.removeItem = function (x) {    \n    $scope.errortext = \"\";    \n    $scope.products.splice(x, 1);  } });\n\n\n\n</script><div ng-app=\"myShoppingList\" \n    ng-controller=\"myCtrl\">  <ul>    <li ng-repeat=\"x in products\">\n        {{x}}<span ng-click=\"removeItem($index)\">&times;</span>    </li>  </ul>\n      <input ng-model=\"addMe\">  <button ng-click=\"addItem()\">Add</button>\n   \n    <p>{{errortext}}</p>\n    </div>\n\n",
      "Example:\n\n\n    <link rel=\"stylesheet\" href=\"https://www.w3schools.com/w3css/4/w3.css\">\n"
    ],
    "summary": "It is time to create a real AngularJS Application.\n\nLets use some of the AngularJS features to make a shopping list, where you can add or remove items:\n\n{{errortext}}\n\nStart by making an application called myShoppingList, and add a controller named myCtrl to it.\n\nThe controller adds an array named p..."
  },
  {
    "title": "AngularJS Examples",
    "content": "You can edit the examples online, and click on a button to view the result.\n\nBasic AngularJS Explained\n\nExpressions Explained\n\nModules Explained\n\nDirectives Explained\n\nModels Explained\n\nControllers Explained\n\nScopes Explained\n\nFilters Explained\n\nXMLHttpRequest Explained\n\nTables Explained\n\nAngular SQL Explained\n\nHTML DOM Explained\n\nHTML Events Explained\n\nAngular Forms Explained\n\nAPI Explained\n\nW3.CSS Explained\n\nAngularJS Includes\n\nAngularJS Animations\n\nAngularJS Applications",
    "code_examples": [
      "AngularJS Example:\n\n<div ng-app=\"\">\n<p>Name: <input type=\"text\" ng-model=\"name\"></p>\n    <p>You wrote: {{ name }}</p>\n\n</div>\n"
    ],
    "summary": "You can edit the examples online, and click on a button to view the result.\n\nBasic AngularJS Explained\n\nExpressions Explained\n\nModules Explained\n\nDirectives Explained\n\nModels Explained\n\nControllers Explained\n\nScopes Explained\n\nFilters Explained\n\nXMLHttpRequest Explained\n\nTables Explained\n\nAngular SQ..."
  },
  {
    "title": "Angular Syllabus",
    "content": "The W3Schools Angular Tutorial is comprehensive and beginner-friendly.\n\nIt will give you a fundamental knowledge of Angular framework.\n\nIt is designed for beginners and requires basic HTML, CSS, and JavaScript knowledge.\n\nThe content has been carefully made to be bite-sized, simple, and easy to understand.\n\nThe syllabus outline and its sequence are structured so you can learn Angular step by step, from the introduction to building applications.\n\nGet Started With Angular »\n\nNote: Are you a teacher teaching Angular? W3Schools Academy is a toolbox of features that can help you teach. It offers classroom features such as pre-built study plans, classroom administration and much more. Read more about Academy here.\n\nGet Started\n\nYou can also create a free account to track your progress.\n\nAs a signed-in user, you get access to features such as:\n\nSign Up - It's free\n\nGet Started\n\nAngular, like any framework, is best learned through hands-on practice.\n\nTry this example using our editor:\n\nIf you want to explore more and host your project, we have a feature called Spaces that allows you to build, test and deploy Angular applications for free.\n\nHere you get a secure sandbox environment called Spaces, where you can practice Angular code and test projects in real-time.\n\nSpaces allow you to test, build, and deploy code. This includes a W3Schools subdomain, hosting, and secure SSL certificates.\n\nSpaces require no installation and run directly in the browser.\n\nFeatures include:\n\nCreate a Spaces Account\n\nW3Schools offers an end-of-pathway certification program.\n\nHere you can take exams to get certified.\n\nThe Angular exam is a test that summarizes the W3Schools Angular syllabus.\n\nAfter passing the exam you get the \"Certified Angular Developer\" Certification.\n\nThe certification exam is adaptive and graded; students will get a grade from intermediate, advanced to professional.\n\nBuy Certificate »\n\nAre you interested in learning how you can use W3Schools Academy to Teach Angular?\n\nWatch a demo of W3Schools Academy. You'll see how it works, and discover how it can make teaching programming easier and more engaging.\n\nWatch Demo »",
    "code_examples": [
      "AngularJS Example:\n\n<!DOCTYPE html>\n<html lang=\"en-US\"><script src=\"https://ajax.googleapis.com/ajax/libs/angularjs/1.6.9/angular.min.js\"></script>\n<body>\n<div ng-app=\"\">\n     <p>Name : <input type=\"text\" ng-model=\"name\"></p>\n     <h1>Hello {{name}}</h1>\n</div>\n</body>\n</html>\n"
    ],
    "summary": "The W3Schools Angular Tutorial is comprehensive and beginner-friendly.\n\nIt will give you a fundamental knowledge of Angular framework.\n\nIt is designed for beginners and requires basic HTML, CSS, and JavaScript knowledge.\n\nThe content has been carefully made to be bite-sized, simple, and easy to unde..."
  },
  {
    "title": "Angular Study Plan",
    "content": "The Angular study plan helps you teach your students Angular step-by-step.\n\nCreating a study plan for Angular is easy.\n\nYou can use a pre-built study plan or customize it.\n\nStudents have different skill levels. The study plans can be customized to ensure that everyone is challenged.\n\nSave time with pre-built teacher materials and study plans. Easily organize your class with a timeline from the introduction of Angular to the final exam.\n\nThis study plan is a feature of W3Schools Academy.\n\nW3Schools Academy is a platform that has everything you need to teach coding, all in one place.\n\nIt offers you as a teacher a toolbox of features that helps you succeed with teaching in your classroom.\n\nYou need to have an active subscription to access the study plan feature. There are two different subscription tiers:\n\nLearn More »\n\nAcademy also offer other features such as:\n\nGet a free demo »\n\nW3Schools has everything you need to teach Angular.\n\nThe Angular training materials is available for you to include and use in your study plan:\n\nWith the Angular Syllabus, your students will start with the basics, like setting up an Angular project and understanding components, and move to more advanced topics, like creating templates, managing data with services, and building dynamic web applications. Each chapter includes simple examples, try-it-yourself sections, exercises, and quizzes to make learning easy, interactive, and fun.\n\nRead more about Angular Syllabus.\n\nThe study plan features are made to help teachers and students. They make learning easy, flexible, and fun. These features work for different types of classes, learning styles and student level.\n\nLearn More »\n\nYou choose the timeline and pace of your study plans.\n\nSchools have different preferences.\n\nSome would like more intensive pace, e.g. 3 weeks, others 12 or more weeks.\n\nIt is completely up to you.\n\nFor example, this is how a 3-week Angular study plan could look like:\n\nImage of Sample Angular study plan:\n\nStart with Angular Study Plans today.\n\nGet Started »\n\nAre you interested in learning how you can use W3Schools Academy to Teach Angular programming?\n\nWatch a demo of W3Schools Academy. You'll see how it works, and discover how it can make teaching programming easier and more engaging.\n\nWatch Demo »",
    "code_examples": [],
    "summary": "The Angular study plan helps you teach your students Angular step-by-step.\n\nCreating a study plan for Angular is easy.\n\nYou can use a pre-built study plan or customize it.\n\nStudents have different skill levels. The study plans can be customized to ensure that everyone is challenged.\n\nSave time with ..."
  },
  {
    "title": "W3Schools AngularJS Certificate",
    "content": "W3Schools offers an Online Certification Program.\n\nThe perfect solution for busy professionals who need to balance work, family, and career building.\n\nMore than 50 000 certificates already issued!\n\nGet Your Certificate »\n\nW3Schools offers an Online Certification Program.\n\nThe perfect solution for busy professionals who need to balance work, family, and career building.\n\nMore than 50 000 certificates already issued!\n\nGet Your Certificate »\n\nAny student or professional within the digital industry.\n\nCertifications are valuable assets to gain trust and demonstrate knowledge to your clients, current or future employers on a ever increasing competitive market.\n\nW3Schools has over two decades of experience with teaching coding online.\n\nOur certificates are recognized and valued by companies looking to employ skilled developers.\n\nShow the world your coding skills by getting a certification.\n\nThe prices is a small fraction compared to the price of traditional education.\n\nDocument and validate your competence by getting certified!\n\nFee: 95 USD\n\nAchievable certification levels: Intermediate (40%) Advanced (75%) Professional (90%)\n\nNumber of questions: Adaptive, 60 on average\n\nRequirement to pass: Minimum 40% - Intermediate level\n\nTime limit: 60 minutes\n\nNumber of attempts to pass: 3\n\nExam deadline: None\n\nCertification Expiration: None\n\nFormat: Online, multiple choice\n\nRegister now »\n\nGetting a certificate proves your commitment to upgrading your skills.\n\nThe certificate can be added as credentials to your CV, Resume, LinkedIn profile, and so on.\n\nIt gives you the credibility needed for more responsibilities, larger projects, and a higher salary.\n\nKnowledge is power, especially in the current job market.\n\nDocumentation of your skills enables you to advance your career or helps you to start a new one.\n\nExample certificate:\n\nEach certificate gets a unique link that can be shared with others.\n\nValidate your certification with the link or QR code.\n\nCheck how it looks like in this Example.\n\nShare your certificate on Linked in the Certifications section in just one click!\n\nGetting a certificate proves your commitment to upgrade your skills, gives you the credibility needed for more responsibilities, larger projects, and a higher salary.\n\nGet Your Certificate »\n\nAre you an educator, manager or business owner looking for courses or certifications?\n\nWe are working with schools, companies and organizations from all over the world.\n\nGet courses and/or certifications for your team here.",
    "code_examples": [],
    "summary": "W3Schools offers an Online Certification Program.\n\nThe perfect solution for busy professionals who need to balance work, family, and career building.\n\nMore than 50 000 certificates already issued!\n\nGet Your Certificate »\n\nW3Schools offers an Online Certification Program.\n\nThe perfect solution for bu..."
  },
  {
    "title": "AngularJS References",
    "content": "AngularJS modifies the default behavior of some HTML elements.\n\nFilters are explained in Angular Filters.\n\nValidation is explained in Angular Validation.\n\nThe Global API is explained in Angular API.",
    "code_examples": [],
    "summary": "AngularJS modifies the default behavior of some HTML elements.\n\nFilters are explained in Angular Filters.\n\nValidation is explained in Angular Validation.\n\nThe Global API is explained in Angular API."
  }
]